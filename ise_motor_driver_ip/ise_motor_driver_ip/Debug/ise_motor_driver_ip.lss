
ise_motor_driver_ip.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000126a  000012fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000126a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000420  00800104  00800104  00001302  2**0
                  ALLOC
  3 .stab         00002bec  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009ba  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000048b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f2  00000000  00000000  00004a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080a  00000000  00000000  00005d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c33  00000000  00000000  0000652c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  00007160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065d  00000000  00000000  0000749c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b02  00000000  00000000  00007af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000085fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_24>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e6       	ldi	r30, 0x6A	; 106
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 30       	cpi	r26, 0x04	; 4
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	15 e0       	ldi	r17, 0x05	; 5
      8c:	a4 e0       	ldi	r26, 0x04	; 4
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 32       	cpi	r26, 0x24	; 36
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 4f 03 	call	0x69e	; 0x69e <main>
      9e:	0c 94 33 09 	jmp	0x1266	; 0x1266 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z16I2C_setCallbacksPFvhEPFvvE>:
static void (*I2C_recv)(uint8_t);
static void (*I2C_req)();

void I2C_setCallbacks(void (*recv)(uint8_t), void (*req)())
{
	I2C_recv = recv;
      a6:	90 93 05 01 	sts	0x0105, r25
      aa:	80 93 04 01 	sts	0x0104, r24
	I2C_req = req;
      ae:	70 93 07 01 	sts	0x0107, r23
      b2:	60 93 06 01 	sts	0x0106, r22
}
      b6:	08 95       	ret

000000b8 <_Z8I2C_inith>:

void I2C_init(uint8_t address)
{
	cli();
      b8:	f8 94       	cli
	// load address into TWI address register
	TWAR = address << 1;
      ba:	88 0f       	add	r24, r24
      bc:	80 93 ba 00 	sts	0x00BA, r24
	// set the TWCR to enable address matching and enable TWI, clear TWINT, enable TWI interrupt
	TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
      c0:	85 ec       	ldi	r24, 0xC5	; 197
      c2:	80 93 bc 00 	sts	0x00BC, r24
	sei();
      c6:	78 94       	sei
}
      c8:	08 95       	ret

000000ca <_Z13I2C_init_synch>:

void I2C_init_sync(uint8_t address)
{
	cli();
      ca:	f8 94       	cli
	// load address into TWI address register
	TWAR = address << 1;
      cc:	88 0f       	add	r24, r24
      ce:	80 93 ba 00 	sts	0x00BA, r24
	// set the TWCR to enable address matching and enable TWI, clear TWINT, enable TWI interrupt
	TWCR = (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
      d2:	84 ec       	ldi	r24, 0xC4	; 196
      d4:	80 93 bc 00 	sts	0x00BC, r24
	sei();
      d8:	78 94       	sei
}
      da:	08 95       	ret

000000dc <_Z8I2C_stopv>:

void I2C_stop(void)
{
	// clear acknowledge and enable bits
	cli();
      dc:	f8 94       	cli
	TWCR = 0;
      de:	10 92 bc 00 	sts	0x00BC, r1
	TWAR = 0;
      e2:	10 92 ba 00 	sts	0x00BA, r1
	sei();
      e6:	78 94       	sei
}
      e8:	08 95       	ret

000000ea <_Z8I2C_mainv>:

void I2C_main()
{
	//é©à∂SLA+RéÛêMÇ‹Ç≈ë“ã@
	while( !(TWCR & (1 << TWINT))){
      ea:	ec eb       	ldi	r30, 0xBC	; 188
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	88 23       	and	r24, r24
      f2:	ec f7       	brge	.-6      	; 0xee <_Z8I2C_mainv+0x4>
	//_delay_us(10);
	}
		
	switch(TW_STATUS)
      f4:	80 91 b9 00 	lds	r24, 0x00B9
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	88 7f       	andi	r24, 0xF8	; 248
      fc:	90 70       	andi	r25, 0x00	; 0
      fe:	80 38       	cpi	r24, 0x80	; 128
     100:	91 05       	cpc	r25, r1
     102:	69 f0       	breq	.+26     	; 0x11e <_Z8I2C_mainv+0x34>
     104:	81 38       	cpi	r24, 0x81	; 129
     106:	91 05       	cpc	r25, r1
     108:	1c f4       	brge	.+6      	; 0x110 <_Z8I2C_mainv+0x26>
     10a:	00 97       	sbiw	r24, 0x00	; 0
     10c:	29 f1       	breq	.+74     	; 0x158 <_Z8I2C_mainv+0x6e>
     10e:	2a c0       	rjmp	.+84     	; 0x164 <_Z8I2C_mainv+0x7a>
     110:	88 3a       	cpi	r24, 0xA8	; 168
     112:	91 05       	cpc	r25, r1
     114:	79 f0       	breq	.+30     	; 0x134 <_Z8I2C_mainv+0x4a>
     116:	88 3b       	cpi	r24, 0xB8	; 184
     118:	91 05       	cpc	r25, r1
     11a:	21 f5       	brne	.+72     	; 0x164 <_Z8I2C_mainv+0x7a>
     11c:	14 c0       	rjmp	.+40     	; 0x146 <_Z8I2C_mainv+0x5c>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		I2C_recv(TWDR);
     11e:	80 91 bb 00 	lds	r24, 0x00BB
     122:	e0 91 04 01 	lds	r30, 0x0104
     126:	f0 91 05 01 	lds	r31, 0x0105
     12a:	09 95       	icall
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     12c:	84 ec       	ldi	r24, 0xC4	; 196
     12e:	80 93 bc 00 	sts	0x00BC, r24
		break;
     132:	08 95       	ret
		case TW_ST_SLA_ACK:
		// master is requesting data, call the request callback
		I2C_req();
     134:	e0 91 06 01 	lds	r30, 0x0106
     138:	f0 91 07 01 	lds	r31, 0x0107
     13c:	09 95       	icall
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     13e:	84 ec       	ldi	r24, 0xC4	; 196
     140:	80 93 bc 00 	sts	0x00BC, r24
		break;
     144:	08 95       	ret
		case TW_ST_DATA_ACK:
		// master is requesting data, call the request callback
		I2C_req();
     146:	e0 91 06 01 	lds	r30, 0x0106
     14a:	f0 91 07 01 	lds	r31, 0x0107
     14e:	09 95       	icall
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     150:	84 ec       	ldi	r24, 0xC4	; 196
     152:	80 93 bc 00 	sts	0x00BC, r24
		break;
     156:	08 95       	ret
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
     158:	ec eb       	ldi	r30, 0xBC	; 188
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	10 82       	st	Z, r1
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     15e:	84 ec       	ldi	r24, 0xC4	; 196
     160:	80 83       	st	Z, r24
		break;
     162:	08 95       	ret
		default:
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     164:	84 ec       	ldi	r24, 0xC4	; 196
     166:	80 93 bc 00 	sts	0x00BC, r24
     16a:	08 95       	ret

0000016c <_Z8I2C_bodyv>:
		break;
	}
}

void I2C_body() {
	switch(TW_STATUS)
     16c:	80 91 b9 00 	lds	r24, 0x00B9
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	88 7f       	andi	r24, 0xF8	; 248
     174:	90 70       	andi	r25, 0x00	; 0
     176:	80 38       	cpi	r24, 0x80	; 128
     178:	91 05       	cpc	r25, r1
     17a:	69 f0       	breq	.+26     	; 0x196 <_Z8I2C_bodyv+0x2a>
     17c:	81 38       	cpi	r24, 0x81	; 129
     17e:	91 05       	cpc	r25, r1
     180:	1c f4       	brge	.+6      	; 0x188 <_Z8I2C_bodyv+0x1c>
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	29 f1       	breq	.+74     	; 0x1d0 <_Z8I2C_bodyv+0x64>
     186:	2a c0       	rjmp	.+84     	; 0x1dc <_Z8I2C_bodyv+0x70>
     188:	88 3a       	cpi	r24, 0xA8	; 168
     18a:	91 05       	cpc	r25, r1
     18c:	79 f0       	breq	.+30     	; 0x1ac <_Z8I2C_bodyv+0x40>
     18e:	88 3b       	cpi	r24, 0xB8	; 184
     190:	91 05       	cpc	r25, r1
     192:	21 f5       	brne	.+72     	; 0x1dc <_Z8I2C_bodyv+0x70>
     194:	14 c0       	rjmp	.+40     	; 0x1be <_Z8I2C_bodyv+0x52>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		I2C_recv(TWDR);
     196:	80 91 bb 00 	lds	r24, 0x00BB
     19a:	e0 91 04 01 	lds	r30, 0x0104
     19e:	f0 91 05 01 	lds	r31, 0x0105
     1a2:	09 95       	icall
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     1a4:	84 ec       	ldi	r24, 0xC4	; 196
     1a6:	80 93 bc 00 	sts	0x00BC, r24
		break;
     1aa:	08 95       	ret
		case TW_ST_SLA_ACK:
		// master is requesting data, call the request callback
		I2C_req();
     1ac:	e0 91 06 01 	lds	r30, 0x0106
     1b0:	f0 91 07 01 	lds	r31, 0x0107
     1b4:	09 95       	icall
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     1b6:	84 ec       	ldi	r24, 0xC4	; 196
     1b8:	80 93 bc 00 	sts	0x00BC, r24
		break;
     1bc:	08 95       	ret
		case TW_ST_DATA_ACK:
		// master is requesting data, call the request callback
		I2C_req();
     1be:	e0 91 06 01 	lds	r30, 0x0106
     1c2:	f0 91 07 01 	lds	r31, 0x0107
     1c6:	09 95       	icall
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     1c8:	84 ec       	ldi	r24, 0xC4	; 196
     1ca:	80 93 bc 00 	sts	0x00BC, r24
		break;
     1ce:	08 95       	ret
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
     1d0:	ec eb       	ldi	r30, 0xBC	; 188
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	10 82       	st	Z, r1
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     1d6:	84 ec       	ldi	r24, 0xC4	; 196
     1d8:	80 83       	st	Z, r24
		break;
     1da:	08 95       	ret
		default:
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     1dc:	84 ec       	ldi	r24, 0xC4	; 196
     1de:	80 93 bc 00 	sts	0x00BC, r24
     1e2:	08 95       	ret

000001e4 <__vector_24>:
	
}


ISR(TWI_vect)
{
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	6f 93       	push	r22
     1f8:	7f 93       	push	r23
     1fa:	8f 93       	push	r24
     1fc:	9f 93       	push	r25
     1fe:	af 93       	push	r26
     200:	bf 93       	push	r27
     202:	ef 93       	push	r30
     204:	ff 93       	push	r31
	switch(TW_STATUS)
     206:	80 91 b9 00 	lds	r24, 0x00B9
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	88 7f       	andi	r24, 0xF8	; 248
     20e:	90 70       	andi	r25, 0x00	; 0
     210:	80 38       	cpi	r24, 0x80	; 128
     212:	91 05       	cpc	r25, r1
     214:	69 f0       	breq	.+26     	; 0x230 <__vector_24+0x4c>
     216:	81 38       	cpi	r24, 0x81	; 129
     218:	91 05       	cpc	r25, r1
     21a:	1c f4       	brge	.+6      	; 0x222 <__vector_24+0x3e>
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	29 f1       	breq	.+74     	; 0x26a <__vector_24+0x86>
     220:	2a c0       	rjmp	.+84     	; 0x276 <__vector_24+0x92>
     222:	88 3a       	cpi	r24, 0xA8	; 168
     224:	91 05       	cpc	r25, r1
     226:	79 f0       	breq	.+30     	; 0x246 <__vector_24+0x62>
     228:	88 3b       	cpi	r24, 0xB8	; 184
     22a:	91 05       	cpc	r25, r1
     22c:	21 f5       	brne	.+72     	; 0x276 <__vector_24+0x92>
     22e:	14 c0       	rjmp	.+40     	; 0x258 <__vector_24+0x74>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		I2C_recv(TWDR);
     230:	80 91 bb 00 	lds	r24, 0x00BB
     234:	e0 91 04 01 	lds	r30, 0x0104
     238:	f0 91 05 01 	lds	r31, 0x0105
     23c:	09 95       	icall
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     23e:	85 ec       	ldi	r24, 0xC5	; 197
     240:	80 93 bc 00 	sts	0x00BC, r24
		break;
     244:	1b c0       	rjmp	.+54     	; 0x27c <__vector_24+0x98>
		case TW_ST_SLA_ACK:
		// master is requesting data, call the request callback
		I2C_req();
     246:	e0 91 06 01 	lds	r30, 0x0106
     24a:	f0 91 07 01 	lds	r31, 0x0107
     24e:	09 95       	icall
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     250:	85 ec       	ldi	r24, 0xC5	; 197
     252:	80 93 bc 00 	sts	0x00BC, r24
		break;
     256:	12 c0       	rjmp	.+36     	; 0x27c <__vector_24+0x98>
		case TW_ST_DATA_ACK:
		// master is requesting data, call the request callback
		I2C_req();
     258:	e0 91 06 01 	lds	r30, 0x0106
     25c:	f0 91 07 01 	lds	r31, 0x0107
     260:	09 95       	icall
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     262:	85 ec       	ldi	r24, 0xC5	; 197
     264:	80 93 bc 00 	sts	0x00BC, r24
		break;
     268:	09 c0       	rjmp	.+18     	; 0x27c <__vector_24+0x98>
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
     26a:	ec eb       	ldi	r30, 0xBC	; 188
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     270:	85 ec       	ldi	r24, 0xC5	; 197
     272:	80 83       	st	Z, r24
		break;
     274:	03 c0       	rjmp	.+6      	; 0x27c <__vector_24+0x98>
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     276:	85 ec       	ldi	r24, 0xC5	; 197
     278:	80 93 bc 00 	sts	0x00BC, r24
		break;
	}
     27c:	ff 91       	pop	r31
     27e:	ef 91       	pop	r30
     280:	bf 91       	pop	r27
     282:	af 91       	pop	r26
     284:	9f 91       	pop	r25
     286:	8f 91       	pop	r24
     288:	7f 91       	pop	r23
     28a:	6f 91       	pop	r22
     28c:	5f 91       	pop	r21
     28e:	4f 91       	pop	r20
     290:	3f 91       	pop	r19
     292:	2f 91       	pop	r18
     294:	0f 90       	pop	r0
     296:	0f be       	out	0x3f, r0	; 63
     298:	0f 90       	pop	r0
     29a:	1f 90       	pop	r1
     29c:	18 95       	reti

0000029e <_Z14i2c_request_cbPc>:
}

void i2c_request_cb(char* buf) {
	// set TI2C_buf_send.str_buf
	//strcpy(buf, "Hello World\n");
	sprintf(buf,"%ld",count);
     29e:	40 91 10 01 	lds	r20, 0x0110
     2a2:	50 91 11 01 	lds	r21, 0x0111
     2a6:	60 91 12 01 	lds	r22, 0x0112
     2aa:	70 91 13 01 	lds	r23, 0x0113
     2ae:	2d b7       	in	r18, 0x3d	; 61
     2b0:	3e b7       	in	r19, 0x3e	; 62
     2b2:	28 50       	subi	r18, 0x08	; 8
     2b4:	30 40       	sbci	r19, 0x00	; 0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	3e bf       	out	0x3e, r19	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	2d bf       	out	0x3d, r18	; 61
     2c0:	ed b7       	in	r30, 0x3d	; 61
     2c2:	fe b7       	in	r31, 0x3e	; 62
     2c4:	31 96       	adiw	r30, 0x01	; 1
     2c6:	ad b7       	in	r26, 0x3d	; 61
     2c8:	be b7       	in	r27, 0x3e	; 62
     2ca:	12 96       	adiw	r26, 0x02	; 2
     2cc:	9c 93       	st	X, r25
     2ce:	8e 93       	st	-X, r24
     2d0:	11 97       	sbiw	r26, 0x01	; 1
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	93 83       	std	Z+3, r25	; 0x03
     2d8:	82 83       	std	Z+2, r24	; 0x02
     2da:	44 83       	std	Z+4, r20	; 0x04
     2dc:	55 83       	std	Z+5, r21	; 0x05
     2de:	66 83       	std	Z+6, r22	; 0x06
     2e0:	77 83       	std	Z+7, r23	; 0x07
     2e2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <sprintf>
     2e6:	2d b7       	in	r18, 0x3d	; 61
     2e8:	3e b7       	in	r19, 0x3e	; 62
     2ea:	28 5f       	subi	r18, 0xF8	; 248
     2ec:	3f 4f       	sbci	r19, 0xFF	; 255
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	3e bf       	out	0x3e, r19	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	2d bf       	out	0x3d, r18	; 61
}
     2f8:	08 95       	ret

000002fa <_Z15i2c_received_cbPc>:
volatile int pw = 0;
volatile int target_enc = 0;
volatile long timer_count = 0;

void i2c_received_cb(char* str) {
	motor_set_speed(atoi(str));
     2fa:	0e 94 36 06 	call	0xc6c	; 0xc6c <atoi>
     2fe:	0e 94 96 03 	call	0x72c	; 0x72c <_Z15motor_set_speedi>
}
     302:	08 95       	ret

00000304 <_Z3pidv>:
	// set TI2C_buf_send.str_buf
	//strcpy(buf, "Hello World\n");
	sprintf(buf,"%ld",count);
}

void pid() {
     304:	4f 92       	push	r4
     306:	5f 92       	push	r5
     308:	6f 92       	push	r6
     30a:	7f 92       	push	r7
     30c:	8f 92       	push	r8
     30e:	9f 92       	push	r9
     310:	af 92       	push	r10
     312:	bf 92       	push	r11
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
  double dt = 0.01; // 0.1sec
  
  static double now_diff;   
  static double pre_enc;	
  static double pre_diff;
  double now_enc = count;
     324:	80 91 10 01 	lds	r24, 0x0110
     328:	90 91 11 01 	lds	r25, 0x0111
     32c:	a0 91 12 01 	lds	r26, 0x0112
     330:	b0 91 13 01 	lds	r27, 0x0113
  
  now_enc = count;
     334:	60 91 10 01 	lds	r22, 0x0110
     338:	70 91 11 01 	lds	r23, 0x0111
     33c:	80 91 12 01 	lds	r24, 0x0112
     340:	90 91 13 01 	lds	r25, 0x0113
     344:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__floatsisf>
     348:	c6 2f       	mov	r28, r22
     34a:	c7 2e       	mov	r12, r23
     34c:	d8 2f       	mov	r29, r24
     34e:	f9 2e       	mov	r15, r25
     350:	46 2e       	mov	r4, r22
     352:	57 2e       	mov	r5, r23
     354:	68 2e       	mov	r6, r24
     356:	79 2e       	mov	r7, r25
  pre_diff = now_diff;
     358:	80 90 14 01 	lds	r8, 0x0114
     35c:	90 90 15 01 	lds	r9, 0x0115
     360:	a0 90 16 01 	lds	r10, 0x0116
     364:	b0 90 17 01 	lds	r11, 0x0117
     368:	80 92 18 01 	sts	0x0118, r8
     36c:	90 92 19 01 	sts	0x0119, r9
     370:	a0 92 1a 01 	sts	0x011A, r10
     374:	b0 92 1b 01 	sts	0x011B, r11
  now_diff = target_enc - now_enc;
     378:	60 91 0c 01 	lds	r22, 0x010C
     37c:	70 91 0d 01 	lds	r23, 0x010D
     380:	88 27       	eor	r24, r24
     382:	77 fd       	sbrc	r23, 7
     384:	80 95       	com	r24
     386:	98 2f       	mov	r25, r24
     388:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__floatsisf>
     38c:	0c 2f       	mov	r16, r28
     38e:	1c 2d       	mov	r17, r12
     390:	2d 2f       	mov	r18, r29
     392:	3f 2d       	mov	r19, r15
     394:	a9 01       	movw	r20, r18
     396:	98 01       	movw	r18, r16
     398:	0e 94 1b 04 	call	0x836	; 0x836 <__subsf3>
     39c:	f6 2e       	mov	r15, r22
     39e:	07 2f       	mov	r16, r23
     3a0:	d8 2f       	mov	r29, r24
     3a2:	c9 2f       	mov	r28, r25
     3a4:	86 2f       	mov	r24, r22
     3a6:	90 2f       	mov	r25, r16
     3a8:	ad 2f       	mov	r26, r29
     3aa:	bc 2f       	mov	r27, r28
     3ac:	80 93 14 01 	sts	0x0114, r24
     3b0:	90 93 15 01 	sts	0x0115, r25
     3b4:	a0 93 16 01 	sts	0x0116, r26
     3b8:	b0 93 17 01 	sts	0x0117, r27
  if(now_diff>320)power=40;
     3bc:	bc 01       	movw	r22, r24
     3be:	cd 01       	movw	r24, r26
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	40 ea       	ldi	r20, 0xA0	; 160
     3c6:	53 e4       	ldi	r21, 0x43	; 67
     3c8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__gesf2>
     3cc:	18 16       	cp	r1, r24
     3ce:	cc f1       	brlt	.+114    	; 0x442 <_Z3pidv+0x13e>
  else if(now_diff<-320)power=-40;
     3d0:	8f 2d       	mov	r24, r15
     3d2:	90 2f       	mov	r25, r16
     3d4:	ad 2f       	mov	r26, r29
     3d6:	bc 2f       	mov	r27, r28
     3d8:	bc 01       	movw	r22, r24
     3da:	cd 01       	movw	r24, r26
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	40 ea       	ldi	r20, 0xA0	; 160
     3e2:	53 ec       	ldi	r21, 0xC3	; 195
     3e4:	0e 94 80 04 	call	0x900	; 0x900 <__cmpsf2>
     3e8:	88 23       	and	r24, r24
     3ea:	b4 f1       	brlt	.+108    	; 0x458 <_Z3pidv+0x154>
  p = KP * now_diff;
  i = KI * integral ;
  d = KD * (now_diff - pre_diff) /dt;
  
  power = power+ p + i + d;
  if(fabs(target_enc)<0.05 && fabs(now_enc)<0.01 /*&&fabs(power) < 10*/)
     3ec:	60 91 0c 01 	lds	r22, 0x010C
     3f0:	70 91 0d 01 	lds	r23, 0x010D
     3f4:	88 27       	eor	r24, r24
     3f6:	77 fd       	sbrc	r23, 7
     3f8:	80 95       	com	r24
     3fa:	98 2f       	mov	r25, r24
     3fc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__floatsisf>
     400:	9f 77       	andi	r25, 0x7F	; 127
     402:	2d ec       	ldi	r18, 0xCD	; 205
     404:	3c ec       	ldi	r19, 0xCC	; 204
     406:	4c e4       	ldi	r20, 0x4C	; 76
     408:	5d e3       	ldi	r21, 0x3D	; 61
     40a:	0e 94 80 04 	call	0x900	; 0x900 <__cmpsf2>
     40e:	88 23       	and	r24, r24
     410:	0c f0       	brlt	.+2      	; 0x414 <_Z3pidv+0x110>
     412:	67 c0       	rjmp	.+206    	; 0x4e2 <_Z3pidv+0x1de>
     414:	c3 01       	movw	r24, r6
     416:	b2 01       	movw	r22, r4
     418:	9f 77       	andi	r25, 0x7F	; 127
     41a:	2a e0       	ldi	r18, 0x0A	; 10
     41c:	37 ed       	ldi	r19, 0xD7	; 215
     41e:	43 e2       	ldi	r20, 0x23	; 35
     420:	5c e3       	ldi	r21, 0x3C	; 60
     422:	0e 94 80 04 	call	0x900	; 0x900 <__cmpsf2>
     426:	88 23       	and	r24, r24
     428:	14 f1       	brlt	.+68     	; 0x46e <_Z3pidv+0x16a>
     42a:	5b c0       	rjmp	.+182    	; 0x4e2 <_Z3pidv+0x1de>
    power = 0;

  }
  else if(40 < power )
    power = 40;
  else if(power < -40)
     42c:	c7 01       	movw	r24, r14
     42e:	b6 01       	movw	r22, r12
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 e2       	ldi	r20, 0x20	; 32
     436:	52 ec       	ldi	r21, 0xC2	; 194
     438:	0e 94 80 04 	call	0x900	; 0x900 <__cmpsf2>
     43c:	88 23       	and	r24, r24
     43e:	14 f1       	brlt	.+68     	; 0x484 <_Z3pidv+0x180>
     440:	36 c0       	rjmp	.+108    	; 0x4ae <_Z3pidv+0x1aa>
  double now_enc = count;
  
  now_enc = count;
  pre_diff = now_diff;
  now_diff = target_enc - now_enc;
  if(now_diff>320)power=40;
     442:	0f 2e       	mov	r0, r31
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	cf 2e       	mov	r12, r31
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	df 2e       	mov	r13, r31
     44c:	f0 e2       	ldi	r31, 0x20	; 32
     44e:	ef 2e       	mov	r14, r31
     450:	f2 e4       	ldi	r31, 0x42	; 66
     452:	ff 2e       	mov	r15, r31
     454:	f0 2d       	mov	r31, r0
     456:	2b c0       	rjmp	.+86     	; 0x4ae <_Z3pidv+0x1aa>
  else if(now_diff<-320)power=-40;
     458:	0f 2e       	mov	r0, r31
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	cf 2e       	mov	r12, r31
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	df 2e       	mov	r13, r31
     462:	f0 e2       	ldi	r31, 0x20	; 32
     464:	ef 2e       	mov	r14, r31
     466:	f2 ec       	ldi	r31, 0xC2	; 194
     468:	ff 2e       	mov	r15, r31
     46a:	f0 2d       	mov	r31, r0
     46c:	20 c0       	rjmp	.+64     	; 0x4ae <_Z3pidv+0x1aa>
  
  power = power+ p + i + d;
  if(fabs(target_enc)<0.05 && fabs(now_enc)<0.01 /*&&fabs(power) < 10*/)
  {
    integral = 0;
    power = 0;
     46e:	0f 2e       	mov	r0, r31
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	cf 2e       	mov	r12, r31
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	df 2e       	mov	r13, r31
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	ef 2e       	mov	r14, r31
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	ff 2e       	mov	r15, r31
     480:	f0 2d       	mov	r31, r0
     482:	15 c0       	rjmp	.+42     	; 0x4ae <_Z3pidv+0x1aa>

  }
  else if(40 < power )
    power = 40;
  else if(power < -40)
    power = -40;
     484:	0f 2e       	mov	r0, r31
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	cf 2e       	mov	r12, r31
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	df 2e       	mov	r13, r31
     48e:	f0 e2       	ldi	r31, 0x20	; 32
     490:	ef 2e       	mov	r14, r31
     492:	f2 ec       	ldi	r31, 0xC2	; 194
     494:	ff 2e       	mov	r15, r31
     496:	f0 2d       	mov	r31, r0
     498:	0a c0       	rjmp	.+20     	; 0x4ae <_Z3pidv+0x1aa>
    integral = 0;
    power = 0;

  }
  else if(40 < power )
    power = 40;
     49a:	0f 2e       	mov	r0, r31
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	cf 2e       	mov	r12, r31
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	df 2e       	mov	r13, r31
     4a4:	f0 e2       	ldi	r31, 0x20	; 32
     4a6:	ef 2e       	mov	r14, r31
     4a8:	f2 e4       	ldi	r31, 0x42	; 66
     4aa:	ff 2e       	mov	r15, r31
     4ac:	f0 2d       	mov	r31, r0
  else if(power < -40)
    power = -40;
  }
 //return power;  
	motor_set_speed(-1*power);
     4ae:	c7 01       	movw	r24, r14
     4b0:	b6 01       	movw	r22, r12
     4b2:	90 58       	subi	r25, 0x80	; 128
     4b4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fixsfsi>
     4b8:	dc 01       	movw	r26, r24
     4ba:	cb 01       	movw	r24, r22
     4bc:	0e 94 96 03 	call	0x72c	; 0x72c <_Z15motor_set_speedi>
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	df 90       	pop	r13
     4ce:	cf 90       	pop	r12
     4d0:	bf 90       	pop	r11
     4d2:	af 90       	pop	r10
     4d4:	9f 90       	pop	r9
     4d6:	8f 90       	pop	r8
     4d8:	7f 90       	pop	r7
     4da:	6f 90       	pop	r6
     4dc:	5f 90       	pop	r5
     4de:	4f 90       	pop	r4
     4e0:	08 95       	ret
  pre_diff = now_diff;
  now_diff = target_enc - now_enc;
  if(now_diff>320)power=40;
  else if(now_diff<-320)power=-40;
  else{
  integral += now_diff * dt;
     4e2:	8f 2d       	mov	r24, r15
     4e4:	90 2f       	mov	r25, r16
     4e6:	ad 2f       	mov	r26, r29
     4e8:	bc 2f       	mov	r27, r28
     4ea:	bc 01       	movw	r22, r24
     4ec:	cd 01       	movw	r24, r26
     4ee:	2a e0       	ldi	r18, 0x0A	; 10
     4f0:	37 ed       	ldi	r19, 0xD7	; 215
     4f2:	43 e2       	ldi	r20, 0x23	; 35
     4f4:	5c e3       	ldi	r21, 0x3C	; 60
     4f6:	0e 94 d3 05 	call	0xba6	; 0xba6 <__mulsf3>
     4fa:	c6 2e       	mov	r12, r22
     4fc:	17 2f       	mov	r17, r23
     4fe:	e8 2e       	mov	r14, r24
     500:	d9 2e       	mov	r13, r25

  p = KP * now_diff;
  i = KI * integral ;
  d = KD * (now_diff - pre_diff) /dt;
  
  power = power+ p + i + d;
     502:	86 2f       	mov	r24, r22
     504:	91 2f       	mov	r25, r17
     506:	ae 2d       	mov	r26, r14
     508:	bd 2d       	mov	r27, r13
     50a:	bc 01       	movw	r22, r24
     50c:	cd 01       	movw	r24, r26
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	a9 01       	movw	r20, r18
     514:	0e 94 1c 04 	call	0x838	; 0x838 <__addsf3>
     518:	2b 01       	movw	r4, r22
     51a:	3c 01       	movw	r6, r24
  pre_diff = now_diff;
  now_diff = target_enc - now_enc;
  if(now_diff>320)power=40;
  else if(now_diff<-320)power=-40;
  else{
  integral += now_diff * dt;
     51c:	8c 2d       	mov	r24, r12
     51e:	91 2f       	mov	r25, r17
     520:	ae 2d       	mov	r26, r14
     522:	bd 2d       	mov	r27, r13
     524:	bc 01       	movw	r22, r24
     526:	cd 01       	movw	r24, r26
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	a9 01       	movw	r20, r18
     52e:	0e 94 1c 04 	call	0x838	; 0x838 <__addsf3>

  p = KP * now_diff;
  i = KI * integral ;
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	a9 01       	movw	r20, r18
     538:	0e 94 d3 05 	call	0xba6	; 0xba6 <__mulsf3>
     53c:	9b 01       	movw	r18, r22
     53e:	ac 01       	movw	r20, r24
  d = KD * (now_diff - pre_diff) /dt;
  
  power = power+ p + i + d;
     540:	c3 01       	movw	r24, r6
     542:	b2 01       	movw	r22, r4
     544:	0e 94 1c 04 	call	0x838	; 0x838 <__addsf3>
     548:	16 2f       	mov	r17, r22
     54a:	e7 2e       	mov	r14, r23
     54c:	d8 2e       	mov	r13, r24
     54e:	c9 2e       	mov	r12, r25
  else{
  integral += now_diff * dt;

  p = KP * now_diff;
  i = KI * integral ;
  d = KD * (now_diff - pre_diff) /dt;
     550:	8f 2d       	mov	r24, r15
     552:	90 2f       	mov	r25, r16
     554:	ad 2f       	mov	r26, r29
     556:	bc 2f       	mov	r27, r28
     558:	bc 01       	movw	r22, r24
     55a:	cd 01       	movw	r24, r26
     55c:	a5 01       	movw	r20, r10
     55e:	94 01       	movw	r18, r8
     560:	0e 94 1b 04 	call	0x836	; 0x836 <__subsf3>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	a9 01       	movw	r20, r18
     56a:	0e 94 d3 05 	call	0xba6	; 0xba6 <__mulsf3>
     56e:	2a e0       	ldi	r18, 0x0A	; 10
     570:	37 ed       	ldi	r19, 0xD7	; 215
     572:	43 e2       	ldi	r20, 0x23	; 35
     574:	5c e3       	ldi	r21, 0x3C	; 60
     576:	0e 94 84 04 	call	0x908	; 0x908 <__divsf3>
     57a:	9b 01       	movw	r18, r22
     57c:	ac 01       	movw	r20, r24
  
  power = power+ p + i + d;
     57e:	81 2f       	mov	r24, r17
     580:	9e 2d       	mov	r25, r14
     582:	ad 2d       	mov	r26, r13
     584:	bc 2d       	mov	r27, r12
     586:	bc 01       	movw	r22, r24
     588:	cd 01       	movw	r24, r26
     58a:	0e 94 1c 04 	call	0x838	; 0x838 <__addsf3>
     58e:	c6 2e       	mov	r12, r22
     590:	d7 2e       	mov	r13, r23
     592:	e8 2e       	mov	r14, r24
     594:	f9 2e       	mov	r15, r25
  {
    integral = 0;
    power = 0;

  }
  else if(40 < power )
     596:	46 2f       	mov	r20, r22
     598:	57 2f       	mov	r21, r23
     59a:	68 2f       	mov	r22, r24
     59c:	79 2f       	mov	r23, r25
     59e:	cb 01       	movw	r24, r22
     5a0:	ba 01       	movw	r22, r20
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	40 e2       	ldi	r20, 0x20	; 32
     5a8:	52 e4       	ldi	r21, 0x42	; 66
     5aa:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__gesf2>
     5ae:	18 16       	cp	r1, r24
     5b0:	0c f0       	brlt	.+2      	; 0x5b4 <_Z3pidv+0x2b0>
     5b2:	3c cf       	rjmp	.-392    	; 0x42c <_Z3pidv+0x128>
     5b4:	72 cf       	rjmp	.-284    	; 0x49a <_Z3pidv+0x196>

000005b6 <__vector_4>:
  }
 //return power;  
	motor_set_speed(-1*power);
}

ISR(PCINT1_vect, ISR_NOBLOCK){//encorder
     5b6:	78 94       	sei
     5b8:	1f 92       	push	r1
     5ba:	0f 92       	push	r0
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	0f 92       	push	r0
     5c0:	11 24       	eor	r1, r1
     5c2:	2f 93       	push	r18
     5c4:	3f 93       	push	r19
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	af 93       	push	r26
     5cc:	bf 93       	push	r27
	if((PINC & (1 << PINC0)) ^ ((PINC & (1 << PINC1))>> 1))--count;
     5ce:	26 b1       	in	r18, 0x06	; 6
     5d0:	86 b1       	in	r24, 0x06	; 6
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	21 70       	andi	r18, 0x01	; 1
     5d6:	30 70       	andi	r19, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	82 70       	andi	r24, 0x02	; 2
     5dc:	90 70       	andi	r25, 0x00	; 0
     5de:	95 95       	asr	r25
     5e0:	87 95       	ror	r24
     5e2:	28 17       	cp	r18, r24
     5e4:	39 07       	cpc	r19, r25
     5e6:	a1 f0       	breq	.+40     	; 0x610 <__vector_4+0x5a>
     5e8:	80 91 10 01 	lds	r24, 0x0110
     5ec:	90 91 11 01 	lds	r25, 0x0111
     5f0:	a0 91 12 01 	lds	r26, 0x0112
     5f4:	b0 91 13 01 	lds	r27, 0x0113
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	a1 09       	sbc	r26, r1
     5fc:	b1 09       	sbc	r27, r1
     5fe:	80 93 10 01 	sts	0x0110, r24
     602:	90 93 11 01 	sts	0x0111, r25
     606:	a0 93 12 01 	sts	0x0112, r26
     60a:	b0 93 13 01 	sts	0x0113, r27
     60e:	13 c0       	rjmp	.+38     	; 0x636 <__vector_4+0x80>
	else ++count;	
     610:	80 91 10 01 	lds	r24, 0x0110
     614:	90 91 11 01 	lds	r25, 0x0111
     618:	a0 91 12 01 	lds	r26, 0x0112
     61c:	b0 91 13 01 	lds	r27, 0x0113
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	a1 1d       	adc	r26, r1
     624:	b1 1d       	adc	r27, r1
     626:	80 93 10 01 	sts	0x0110, r24
     62a:	90 93 11 01 	sts	0x0111, r25
     62e:	a0 93 12 01 	sts	0x0112, r26
     632:	b0 93 13 01 	sts	0x0113, r27
}
     636:	bf 91       	pop	r27
     638:	af 91       	pop	r26
     63a:	9f 91       	pop	r25
     63c:	8f 91       	pop	r24
     63e:	3f 91       	pop	r19
     640:	2f 91       	pop	r18
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <__vector_11>:


ISR(TIMER1_COMPA_vect){//PID
     64c:	1f 92       	push	r1
     64e:	0f 92       	push	r0
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	0f 92       	push	r0
     654:	11 24       	eor	r1, r1
	if (timer_count > (0.1 / 0.00325)) {
		pid();	
		timer_count = 0;
	} 
	timer_count ++;		
}
     656:	0f 90       	pop	r0
     658:	0f be       	out	0x3f, r0	; 63
     65a:	0f 90       	pop	r0
     65c:	1f 90       	pop	r1
     65e:	18 95       	reti

00000660 <_Z5setupv>:


void setup (){
	
	//ÉsÉìïœâªäÑÇËçûÇ›ãñâ¬ÅiPCINT8~15Åj
	PCICR |= (1<<PCIE1);
     660:	e8 e6       	ldi	r30, 0x68	; 104
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	82 60       	ori	r24, 0x02	; 2
     668:	80 83       	st	Z, r24
	//ÉsÉìïœâªäÑÇËçûÇ›ãñâ¬ÅiPCINT8Åj
	PCMSK1 |= (1<<PCINT8);
     66a:	ec e6       	ldi	r30, 0x6C	; 108
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	81 60       	ori	r24, 0x01	; 1
     672:	80 83       	st	Z, r24
	motor_init();
     674:	0e 94 8b 03 	call	0x716	; 0x716 <_Z10motor_initv>
	motor_set_speed(pw);
     678:	80 91 0e 01 	lds	r24, 0x010E
     67c:	90 91 0f 01 	lds	r25, 0x010F
     680:	0e 94 96 03 	call	0x72c	; 0x72c <_Z15motor_set_speedi>
	
	DDRC = 0x00;
     684:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
     686:	18 b8       	out	0x08, r1	; 8
	
	// LED of addresses 0x10~ 0x1F 0~F -> 0~15
	PORTD |= (0b00001111 & I2C_ADDR);
     688:	8b b1       	in	r24, 0x0b	; 11
     68a:	83 60       	ori	r24, 0x03	; 3
     68c:	8b b9       	out	0x0b, r24	; 11
	//ICR1 = 64999; // 3.25ms // 20MHz

	//sei();
	//motor_set_speed(30);
	//motor_set_speed(-30);
	TI2C_init_sync(I2C_ADDR,i2c_received_cb, i2c_request_cb);
     68e:	83 e3       	ldi	r24, 0x33	; 51
     690:	6d e7       	ldi	r22, 0x7D	; 125
     692:	71 e0       	ldi	r23, 0x01	; 1
     694:	4f e4       	ldi	r20, 0x4F	; 79
     696:	51 e0       	ldi	r21, 0x01	; 1
     698:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_Z14TI2C_init_synchPFvPcES1_>
}
     69c:	08 95       	ret

0000069e <main>:


int main(void)
{
	setup();
     69e:	0e 94 30 03 	call	0x660	; 0x660 <_Z5setupv>
	double i = 0;
     6a2:	00 e0       	ldi	r16, 0x00	; 0
     6a4:	10 e0       	ldi	r17, 0x00	; 0
     6a6:	d0 e0       	ldi	r29, 0x00	; 0
     6a8:	c0 e0       	ldi	r28, 0x00	; 0
	
    /* Replace with your application code */
    while (1) 
    {
		while( !(TWCR & (1 << TWINT))){
     6aa:	0f 2e       	mov	r0, r31
     6ac:	fc eb       	ldi	r31, 0xBC	; 188
     6ae:	cf 2e       	mov	r12, r31
     6b0:	dd 24       	eor	r13, r13
     6b2:	f0 2d       	mov	r31, r0
			if (i > 1000){
				pid();
				i = 0;
     6b4:	ff 24       	eor	r15, r15
     6b6:	28 c0       	rjmp	.+80     	; 0x708 <main+0x6a>
	
    /* Replace with your application code */
    while (1) 
    {
		while( !(TWCR & (1 << TWINT))){
			if (i > 1000){
     6b8:	80 2f       	mov	r24, r16
     6ba:	91 2f       	mov	r25, r17
     6bc:	ad 2f       	mov	r26, r29
     6be:	bc 2f       	mov	r27, r28
     6c0:	bc 01       	movw	r22, r24
     6c2:	cd 01       	movw	r24, r26
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	4a e7       	ldi	r20, 0x7A	; 122
     6ca:	54 e4       	ldi	r21, 0x44	; 68
     6cc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__gesf2>
     6d0:	18 16       	cp	r1, r24
     6d2:	34 f4       	brge	.+12     	; 0x6e0 <main+0x42>
				pid();
     6d4:	0e 94 82 01 	call	0x304	; 0x304 <_Z3pidv>
				i = 0;
     6d8:	0f 2d       	mov	r16, r15
     6da:	1f 2d       	mov	r17, r15
     6dc:	df 2d       	mov	r29, r15
     6de:	cf 2d       	mov	r28, r15
			}
			i++;
     6e0:	80 2f       	mov	r24, r16
     6e2:	91 2f       	mov	r25, r17
     6e4:	ad 2f       	mov	r26, r29
     6e6:	bc 2f       	mov	r27, r28
     6e8:	bc 01       	movw	r22, r24
     6ea:	cd 01       	movw	r24, r26
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e8       	ldi	r20, 0x80	; 128
     6f2:	5f e3       	ldi	r21, 0x3F	; 63
     6f4:	0e 94 1c 04 	call	0x838	; 0x838 <__addsf3>
     6f8:	06 2f       	mov	r16, r22
     6fa:	17 2f       	mov	r17, r23
     6fc:	d8 2f       	mov	r29, r24
     6fe:	c9 2f       	mov	r28, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     700:	82 e4       	ldi	r24, 0x42	; 66
     702:	8a 95       	dec	r24
     704:	f1 f7       	brne	.-4      	; 0x702 <main+0x64>
     706:	00 c0       	rjmp	.+0      	; 0x708 <main+0x6a>
	double i = 0;
	
    /* Replace with your application code */
    while (1) 
    {
		while( !(TWCR & (1 << TWINT))){
     708:	f6 01       	movw	r30, r12
     70a:	80 81       	ld	r24, Z
     70c:	88 23       	and	r24, r24
     70e:	a4 f6       	brge	.-88     	; 0x6b8 <main+0x1a>
				i = 0;
			}
			i++;
			_delay_us(10);
		}
		I2C_body();
     710:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z8I2C_bodyv>
{
	setup();
	double i = 0;
	
    /* Replace with your application code */
    while (1) 
     714:	f9 cf       	rjmp	.-14     	; 0x708 <main+0x6a>

00000716 <_Z10motor_initv>:
};

int motor_init(void)
{
	//setup
	DDRD |= 0b11100000;
     716:	8a b1       	in	r24, 0x0a	; 10
     718:	80 6e       	ori	r24, 0xE0	; 224
     71a:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A = 0b10100011;  //highspeedPWM
     71c:	83 ea       	ldi	r24, 0xA3	; 163
     71e:	84 bd       	out	0x24, r24	; 36
	
	//TCCR0B = 0b00000010;  //1/8,Top=OVF
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	85 bd       	out	0x25, r24	; 37
	TCCR0B = 0b00000100;  // 1/256
     724:	08 95       	ret

00000726 <_Z7pwm_mapi>:
}

int pwm_map (int duty){
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
	return TMR0INI + (int)(TOP/100*duty); //duty=0~100
     72a:	08 95       	ret

0000072c <_Z15motor_set_speedi>:
}
	
	
	
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	ec 01       	movw	r28, r24
int motor_set_speed (int power) {
	
     732:	dd 23       	and	r29, r29
     734:	24 f4       	brge	.+8      	; 0x73e <_Z15motor_set_speedi+0x12>
     736:	88 27       	eor	r24, r24
     738:	99 27       	eor	r25, r25
     73a:	8c 1b       	sub	r24, r28
     73c:	9d 0b       	sbc	r25, r29
     73e:	0e 94 93 03 	call	0x726	; 0x726 <_Z7pwm_mapi>
     742:	87 bd       	out	0x27, r24	; 39
     	OCR0A = pwm_map(abs(power));
     744:	88 bd       	out	0x28, r24	; 40
	    OCR0B = pwm_map(abs(power));

     746:	dd 23       	and	r29, r29
     748:	14 f4       	brge	.+4      	; 0x74e <_Z15motor_set_speedi+0x22>
		if (power < 0){
			//PORTD = 0b01100000;	  //PHASE=high
     74a:	5f 98       	cbi	0x0b, 7	; 11
     74c:	04 c0       	rjmp	.+8      	; 0x756 <_Z15motor_set_speedi+0x2a>
			PORTD &= 0b01111111;
		}
		
     74e:	1c 16       	cp	r1, r28
     750:	1d 06       	cpc	r1, r29
     752:	0c f4       	brge	.+2      	; 0x756 <_Z15motor_set_speedi+0x2a>
		else if(power > 0){
			//PORTD = 0b11100000;   //PHASE=low
     754:	5f 9a       	sbi	0x0b, 7	; 11
			PORTD |= 0b10000000;
		}
				
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <_Z14TI2C_requestedv>:

void TI2C_requested() //Å®master
{
	static int i = 0;
	
	if (i == 0){
     75c:	80 91 20 05 	lds	r24, 0x0520
     760:	90 91 21 05 	lds	r25, 0x0521
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	39 f4       	brne	.+14     	; 0x776 <_Z14TI2C_requestedv+0x1a>
		// initialize
		TI2C_req_cb(TI2C_buf_send.str_buf);
     768:	e0 91 1c 01 	lds	r30, 0x011C
     76c:	f0 91 1d 01 	lds	r31, 0x011D
     770:	80 e2       	ldi	r24, 0x20	; 32
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	09 95       	icall
	}
	// send data
	if (TI2C_buf_send.uint_buf[i] == '\0') { 
     776:	e0 91 20 05 	lds	r30, 0x0520
     77a:	f0 91 21 05 	lds	r31, 0x0521
     77e:	e0 5e       	subi	r30, 0xE0	; 224
     780:	fe 4f       	sbci	r31, 0xFE	; 254
     782:	80 81       	ld	r24, Z
     784:	88 23       	and	r24, r24
     786:	41 f4       	brne	.+16     	; 0x798 <_Z14TI2C_requestedv+0x3c>
void I2C_main();
void I2C_body();

inline void __attribute__((always_inline)) I2C_transmitByte(uint8_t data)
{
	TWDR = data;
     788:	84 e2       	ldi	r24, 0x24	; 36
     78a:	80 93 bb 00 	sts	0x00BB, r24
		I2C_transmitByte(postfix);
		i = 0;
     78e:	10 92 21 05 	sts	0x0521, r1
     792:	10 92 20 05 	sts	0x0520, r1
     796:	08 95       	ret
     798:	80 93 bb 00 	sts	0x00BB, r24
	} else {
		I2C_transmitByte(TI2C_buf_send.uint_buf[i]);
		i++;
     79c:	80 91 20 05 	lds	r24, 0x0520
     7a0:	90 91 21 05 	lds	r25, 0x0521
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	90 93 21 05 	sts	0x0521, r25
     7aa:	80 93 20 05 	sts	0x0520, r24
     7ae:	08 95       	ret

000007b0 <_Z9TI2C_inithPFvPcES1_>:
void (*TI2C_recv_cb)(char*);
void (*TI2C_req_cb)(char*);


void TI2C_init(uint8_t address, void (*recv)(char*), void (*req)(char*)){
	TI2C_recv_cb = recv;
     7b0:	70 93 1f 01 	sts	0x011F, r23
     7b4:	60 93 1e 01 	sts	0x011E, r22
	TI2C_req_cb = req;
     7b8:	50 93 1d 01 	sts	0x011D, r21
     7bc:	40 93 1c 01 	sts	0x011C, r20
	I2C_init(address);
     7c0:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z8I2C_inith>
	I2C_setCallbacks(TI2C_char_received, TI2C_requested);
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	94 e0       	ldi	r25, 0x04	; 4
     7c8:	6e ea       	ldi	r22, 0xAE	; 174
     7ca:	73 e0       	ldi	r23, 0x03	; 3
     7cc:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z16I2C_setCallbacksPFvhEPFvvE>
}
     7d0:	08 95       	ret

000007d2 <_Z14TI2C_init_synchPFvPcES1_>:

void TI2C_init_sync(uint8_t address, void (*recv)(char*), void (*req)(char*)){
	TI2C_recv_cb = recv;
     7d2:	70 93 1f 01 	sts	0x011F, r23
     7d6:	60 93 1e 01 	sts	0x011E, r22
	TI2C_req_cb = req;
     7da:	50 93 1d 01 	sts	0x011D, r21
     7de:	40 93 1c 01 	sts	0x011C, r20
	I2C_init_sync(address);
     7e2:	0e 94 65 00 	call	0xca	; 0xca <_Z13I2C_init_synch>
	I2C_setCallbacks(TI2C_char_received, TI2C_requested);
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	94 e0       	ldi	r25, 0x04	; 4
     7ea:	6e ea       	ldi	r22, 0xAE	; 174
     7ec:	73 e0       	ldi	r23, 0x03	; 3
     7ee:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z16I2C_setCallbacksPFvhEPFvvE>
}
     7f2:	08 95       	ret

000007f4 <_Z13TI2C_receivedPc>:


void TI2C_received(char *str) //slave <-
{
	TI2C_recv_cb(str);
     7f4:	e0 91 1e 01 	lds	r30, 0x011E
     7f8:	f0 91 1f 01 	lds	r31, 0x011F
     7fc:	09 95       	icall
}
     7fe:	08 95       	ret

00000800 <_Z18TI2C_char_receivedh>:

void TI2C_char_received(uint8_t received_data) {
	//DDRC = 0b00000010;
	static int i = 0;
	// ÉfÅ[É^Ç…í«â¡
	TI2C_buf.uint_buf[i] = received_data;
     800:	20 91 22 05 	lds	r18, 0x0522
     804:	30 91 23 05 	lds	r19, 0x0523
     808:	f9 01       	movw	r30, r18
     80a:	e0 5e       	subi	r30, 0xE0	; 224
     80c:	fc 4f       	sbci	r31, 0xFC	; 252
     80e:	80 83       	st	Z, r24
	// postfixÇ™óàÇΩèÍçáÇ…ÉRÅ[ÉãÉoÉbÉNÇåƒÇÒÇ≈èâä˙âª
	if (TI2C_buf.str_buf[i] == postfix) {
     810:	84 32       	cpi	r24, 0x24	; 36
     812:	51 f4       	brne	.+20     	; 0x828 <_Z18TI2C_char_receivedh+0x28>
		TI2C_buf.str_buf[i] = '\0';
     814:	80 e2       	ldi	r24, 0x20	; 32
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	10 82       	st	Z, r1
		TI2C_received(TI2C_buf.str_buf);
     81a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_Z13TI2C_receivedPc>
		i = 0;
     81e:	10 92 23 05 	sts	0x0523, r1
     822:	10 92 22 05 	sts	0x0522, r1
     826:	08 95       	ret
	} else {
		i++;
     828:	2f 5f       	subi	r18, 0xFF	; 255
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	30 93 23 05 	sts	0x0523, r19
     830:	20 93 22 05 	sts	0x0522, r18
     834:	08 95       	ret

00000836 <__subsf3>:
     836:	50 58       	subi	r21, 0x80	; 128

00000838 <__addsf3>:
     838:	bb 27       	eor	r27, r27
     83a:	aa 27       	eor	r26, r26
     83c:	0e d0       	rcall	.+28     	; 0x85a <__addsf3x>
     83e:	75 c1       	rjmp	.+746    	; 0xb2a <__fp_round>
     840:	66 d1       	rcall	.+716    	; 0xb0e <__fp_pscA>
     842:	30 f0       	brcs	.+12     	; 0x850 <__addsf3+0x18>
     844:	6b d1       	rcall	.+726    	; 0xb1c <__fp_pscB>
     846:	20 f0       	brcs	.+8      	; 0x850 <__addsf3+0x18>
     848:	31 f4       	brne	.+12     	; 0x856 <__addsf3+0x1e>
     84a:	9f 3f       	cpi	r25, 0xFF	; 255
     84c:	11 f4       	brne	.+4      	; 0x852 <__addsf3+0x1a>
     84e:	1e f4       	brtc	.+6      	; 0x856 <__addsf3+0x1e>
     850:	5b c1       	rjmp	.+694    	; 0xb08 <__fp_nan>
     852:	0e f4       	brtc	.+2      	; 0x856 <__addsf3+0x1e>
     854:	e0 95       	com	r30
     856:	e7 fb       	bst	r30, 7
     858:	51 c1       	rjmp	.+674    	; 0xafc <__fp_inf>

0000085a <__addsf3x>:
     85a:	e9 2f       	mov	r30, r25
     85c:	77 d1       	rcall	.+750    	; 0xb4c <__fp_split3>
     85e:	80 f3       	brcs	.-32     	; 0x840 <__addsf3+0x8>
     860:	ba 17       	cp	r27, r26
     862:	62 07       	cpc	r22, r18
     864:	73 07       	cpc	r23, r19
     866:	84 07       	cpc	r24, r20
     868:	95 07       	cpc	r25, r21
     86a:	18 f0       	brcs	.+6      	; 0x872 <__addsf3x+0x18>
     86c:	71 f4       	brne	.+28     	; 0x88a <__addsf3x+0x30>
     86e:	9e f5       	brtc	.+102    	; 0x8d6 <__addsf3x+0x7c>
     870:	8f c1       	rjmp	.+798    	; 0xb90 <__fp_zero>
     872:	0e f4       	brtc	.+2      	; 0x876 <__addsf3x+0x1c>
     874:	e0 95       	com	r30
     876:	0b 2e       	mov	r0, r27
     878:	ba 2f       	mov	r27, r26
     87a:	a0 2d       	mov	r26, r0
     87c:	0b 01       	movw	r0, r22
     87e:	b9 01       	movw	r22, r18
     880:	90 01       	movw	r18, r0
     882:	0c 01       	movw	r0, r24
     884:	ca 01       	movw	r24, r20
     886:	a0 01       	movw	r20, r0
     888:	11 24       	eor	r1, r1
     88a:	ff 27       	eor	r31, r31
     88c:	59 1b       	sub	r21, r25
     88e:	99 f0       	breq	.+38     	; 0x8b6 <__addsf3x+0x5c>
     890:	59 3f       	cpi	r21, 0xF9	; 249
     892:	50 f4       	brcc	.+20     	; 0x8a8 <__addsf3x+0x4e>
     894:	50 3e       	cpi	r21, 0xE0	; 224
     896:	68 f1       	brcs	.+90     	; 0x8f2 <__addsf3x+0x98>
     898:	1a 16       	cp	r1, r26
     89a:	f0 40       	sbci	r31, 0x00	; 0
     89c:	a2 2f       	mov	r26, r18
     89e:	23 2f       	mov	r18, r19
     8a0:	34 2f       	mov	r19, r20
     8a2:	44 27       	eor	r20, r20
     8a4:	58 5f       	subi	r21, 0xF8	; 248
     8a6:	f3 cf       	rjmp	.-26     	; 0x88e <__addsf3x+0x34>
     8a8:	46 95       	lsr	r20
     8aa:	37 95       	ror	r19
     8ac:	27 95       	ror	r18
     8ae:	a7 95       	ror	r26
     8b0:	f0 40       	sbci	r31, 0x00	; 0
     8b2:	53 95       	inc	r21
     8b4:	c9 f7       	brne	.-14     	; 0x8a8 <__addsf3x+0x4e>
     8b6:	7e f4       	brtc	.+30     	; 0x8d6 <__addsf3x+0x7c>
     8b8:	1f 16       	cp	r1, r31
     8ba:	ba 0b       	sbc	r27, r26
     8bc:	62 0b       	sbc	r22, r18
     8be:	73 0b       	sbc	r23, r19
     8c0:	84 0b       	sbc	r24, r20
     8c2:	ba f0       	brmi	.+46     	; 0x8f2 <__addsf3x+0x98>
     8c4:	91 50       	subi	r25, 0x01	; 1
     8c6:	a1 f0       	breq	.+40     	; 0x8f0 <__addsf3x+0x96>
     8c8:	ff 0f       	add	r31, r31
     8ca:	bb 1f       	adc	r27, r27
     8cc:	66 1f       	adc	r22, r22
     8ce:	77 1f       	adc	r23, r23
     8d0:	88 1f       	adc	r24, r24
     8d2:	c2 f7       	brpl	.-16     	; 0x8c4 <__addsf3x+0x6a>
     8d4:	0e c0       	rjmp	.+28     	; 0x8f2 <__addsf3x+0x98>
     8d6:	ba 0f       	add	r27, r26
     8d8:	62 1f       	adc	r22, r18
     8da:	73 1f       	adc	r23, r19
     8dc:	84 1f       	adc	r24, r20
     8de:	48 f4       	brcc	.+18     	; 0x8f2 <__addsf3x+0x98>
     8e0:	87 95       	ror	r24
     8e2:	77 95       	ror	r23
     8e4:	67 95       	ror	r22
     8e6:	b7 95       	ror	r27
     8e8:	f7 95       	ror	r31
     8ea:	9e 3f       	cpi	r25, 0xFE	; 254
     8ec:	08 f0       	brcs	.+2      	; 0x8f0 <__addsf3x+0x96>
     8ee:	b3 cf       	rjmp	.-154    	; 0x856 <__addsf3+0x1e>
     8f0:	93 95       	inc	r25
     8f2:	88 0f       	add	r24, r24
     8f4:	08 f0       	brcs	.+2      	; 0x8f8 <__addsf3x+0x9e>
     8f6:	99 27       	eor	r25, r25
     8f8:	ee 0f       	add	r30, r30
     8fa:	97 95       	ror	r25
     8fc:	87 95       	ror	r24
     8fe:	08 95       	ret

00000900 <__cmpsf2>:
     900:	d9 d0       	rcall	.+434    	; 0xab4 <__fp_cmp>
     902:	08 f4       	brcc	.+2      	; 0x906 <__cmpsf2+0x6>
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	08 95       	ret

00000908 <__divsf3>:
     908:	0c d0       	rcall	.+24     	; 0x922 <__divsf3x>
     90a:	0f c1       	rjmp	.+542    	; 0xb2a <__fp_round>
     90c:	07 d1       	rcall	.+526    	; 0xb1c <__fp_pscB>
     90e:	40 f0       	brcs	.+16     	; 0x920 <__divsf3+0x18>
     910:	fe d0       	rcall	.+508    	; 0xb0e <__fp_pscA>
     912:	30 f0       	brcs	.+12     	; 0x920 <__divsf3+0x18>
     914:	21 f4       	brne	.+8      	; 0x91e <__divsf3+0x16>
     916:	5f 3f       	cpi	r21, 0xFF	; 255
     918:	19 f0       	breq	.+6      	; 0x920 <__divsf3+0x18>
     91a:	f0 c0       	rjmp	.+480    	; 0xafc <__fp_inf>
     91c:	51 11       	cpse	r21, r1
     91e:	39 c1       	rjmp	.+626    	; 0xb92 <__fp_szero>
     920:	f3 c0       	rjmp	.+486    	; 0xb08 <__fp_nan>

00000922 <__divsf3x>:
     922:	14 d1       	rcall	.+552    	; 0xb4c <__fp_split3>
     924:	98 f3       	brcs	.-26     	; 0x90c <__divsf3+0x4>

00000926 <__divsf3_pse>:
     926:	99 23       	and	r25, r25
     928:	c9 f3       	breq	.-14     	; 0x91c <__divsf3+0x14>
     92a:	55 23       	and	r21, r21
     92c:	b1 f3       	breq	.-20     	; 0x91a <__divsf3+0x12>
     92e:	95 1b       	sub	r25, r21
     930:	55 0b       	sbc	r21, r21
     932:	bb 27       	eor	r27, r27
     934:	aa 27       	eor	r26, r26
     936:	62 17       	cp	r22, r18
     938:	73 07       	cpc	r23, r19
     93a:	84 07       	cpc	r24, r20
     93c:	38 f0       	brcs	.+14     	; 0x94c <__divsf3_pse+0x26>
     93e:	9f 5f       	subi	r25, 0xFF	; 255
     940:	5f 4f       	sbci	r21, 0xFF	; 255
     942:	22 0f       	add	r18, r18
     944:	33 1f       	adc	r19, r19
     946:	44 1f       	adc	r20, r20
     948:	aa 1f       	adc	r26, r26
     94a:	a9 f3       	breq	.-22     	; 0x936 <__divsf3_pse+0x10>
     94c:	33 d0       	rcall	.+102    	; 0x9b4 <__divsf3_pse+0x8e>
     94e:	0e 2e       	mov	r0, r30
     950:	3a f0       	brmi	.+14     	; 0x960 <__divsf3_pse+0x3a>
     952:	e0 e8       	ldi	r30, 0x80	; 128
     954:	30 d0       	rcall	.+96     	; 0x9b6 <__divsf3_pse+0x90>
     956:	91 50       	subi	r25, 0x01	; 1
     958:	50 40       	sbci	r21, 0x00	; 0
     95a:	e6 95       	lsr	r30
     95c:	00 1c       	adc	r0, r0
     95e:	ca f7       	brpl	.-14     	; 0x952 <__divsf3_pse+0x2c>
     960:	29 d0       	rcall	.+82     	; 0x9b4 <__divsf3_pse+0x8e>
     962:	fe 2f       	mov	r31, r30
     964:	27 d0       	rcall	.+78     	; 0x9b4 <__divsf3_pse+0x8e>
     966:	66 0f       	add	r22, r22
     968:	77 1f       	adc	r23, r23
     96a:	88 1f       	adc	r24, r24
     96c:	bb 1f       	adc	r27, r27
     96e:	26 17       	cp	r18, r22
     970:	37 07       	cpc	r19, r23
     972:	48 07       	cpc	r20, r24
     974:	ab 07       	cpc	r26, r27
     976:	b0 e8       	ldi	r27, 0x80	; 128
     978:	09 f0       	breq	.+2      	; 0x97c <__divsf3_pse+0x56>
     97a:	bb 0b       	sbc	r27, r27
     97c:	80 2d       	mov	r24, r0
     97e:	bf 01       	movw	r22, r30
     980:	ff 27       	eor	r31, r31
     982:	93 58       	subi	r25, 0x83	; 131
     984:	5f 4f       	sbci	r21, 0xFF	; 255
     986:	2a f0       	brmi	.+10     	; 0x992 <__divsf3_pse+0x6c>
     988:	9e 3f       	cpi	r25, 0xFE	; 254
     98a:	51 05       	cpc	r21, r1
     98c:	68 f0       	brcs	.+26     	; 0x9a8 <__divsf3_pse+0x82>
     98e:	b6 c0       	rjmp	.+364    	; 0xafc <__fp_inf>
     990:	00 c1       	rjmp	.+512    	; 0xb92 <__fp_szero>
     992:	5f 3f       	cpi	r21, 0xFF	; 255
     994:	ec f3       	brlt	.-6      	; 0x990 <__divsf3_pse+0x6a>
     996:	98 3e       	cpi	r25, 0xE8	; 232
     998:	dc f3       	brlt	.-10     	; 0x990 <__divsf3_pse+0x6a>
     99a:	86 95       	lsr	r24
     99c:	77 95       	ror	r23
     99e:	67 95       	ror	r22
     9a0:	b7 95       	ror	r27
     9a2:	f7 95       	ror	r31
     9a4:	9f 5f       	subi	r25, 0xFF	; 255
     9a6:	c9 f7       	brne	.-14     	; 0x99a <__divsf3_pse+0x74>
     9a8:	88 0f       	add	r24, r24
     9aa:	91 1d       	adc	r25, r1
     9ac:	96 95       	lsr	r25
     9ae:	87 95       	ror	r24
     9b0:	97 f9       	bld	r25, 7
     9b2:	08 95       	ret
     9b4:	e1 e0       	ldi	r30, 0x01	; 1
     9b6:	66 0f       	add	r22, r22
     9b8:	77 1f       	adc	r23, r23
     9ba:	88 1f       	adc	r24, r24
     9bc:	bb 1f       	adc	r27, r27
     9be:	62 17       	cp	r22, r18
     9c0:	73 07       	cpc	r23, r19
     9c2:	84 07       	cpc	r24, r20
     9c4:	ba 07       	cpc	r27, r26
     9c6:	20 f0       	brcs	.+8      	; 0x9d0 <__divsf3_pse+0xaa>
     9c8:	62 1b       	sub	r22, r18
     9ca:	73 0b       	sbc	r23, r19
     9cc:	84 0b       	sbc	r24, r20
     9ce:	ba 0b       	sbc	r27, r26
     9d0:	ee 1f       	adc	r30, r30
     9d2:	88 f7       	brcc	.-30     	; 0x9b6 <__divsf3_pse+0x90>
     9d4:	e0 95       	com	r30
     9d6:	08 95       	ret

000009d8 <__fixsfsi>:
     9d8:	04 d0       	rcall	.+8      	; 0x9e2 <__fixunssfsi>
     9da:	68 94       	set
     9dc:	b1 11       	cpse	r27, r1
     9de:	d9 c0       	rjmp	.+434    	; 0xb92 <__fp_szero>
     9e0:	08 95       	ret

000009e2 <__fixunssfsi>:
     9e2:	bc d0       	rcall	.+376    	; 0xb5c <__fp_splitA>
     9e4:	88 f0       	brcs	.+34     	; 0xa08 <__fixunssfsi+0x26>
     9e6:	9f 57       	subi	r25, 0x7F	; 127
     9e8:	90 f0       	brcs	.+36     	; 0xa0e <__fixunssfsi+0x2c>
     9ea:	b9 2f       	mov	r27, r25
     9ec:	99 27       	eor	r25, r25
     9ee:	b7 51       	subi	r27, 0x17	; 23
     9f0:	a0 f0       	brcs	.+40     	; 0xa1a <__fixunssfsi+0x38>
     9f2:	d1 f0       	breq	.+52     	; 0xa28 <__fixunssfsi+0x46>
     9f4:	66 0f       	add	r22, r22
     9f6:	77 1f       	adc	r23, r23
     9f8:	88 1f       	adc	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	1a f0       	brmi	.+6      	; 0xa04 <__fixunssfsi+0x22>
     9fe:	ba 95       	dec	r27
     a00:	c9 f7       	brne	.-14     	; 0x9f4 <__fixunssfsi+0x12>
     a02:	12 c0       	rjmp	.+36     	; 0xa28 <__fixunssfsi+0x46>
     a04:	b1 30       	cpi	r27, 0x01	; 1
     a06:	81 f0       	breq	.+32     	; 0xa28 <__fixunssfsi+0x46>
     a08:	c3 d0       	rcall	.+390    	; 0xb90 <__fp_zero>
     a0a:	b1 e0       	ldi	r27, 0x01	; 1
     a0c:	08 95       	ret
     a0e:	c0 c0       	rjmp	.+384    	; 0xb90 <__fp_zero>
     a10:	67 2f       	mov	r22, r23
     a12:	78 2f       	mov	r23, r24
     a14:	88 27       	eor	r24, r24
     a16:	b8 5f       	subi	r27, 0xF8	; 248
     a18:	39 f0       	breq	.+14     	; 0xa28 <__fixunssfsi+0x46>
     a1a:	b9 3f       	cpi	r27, 0xF9	; 249
     a1c:	cc f3       	brlt	.-14     	; 0xa10 <__fixunssfsi+0x2e>
     a1e:	86 95       	lsr	r24
     a20:	77 95       	ror	r23
     a22:	67 95       	ror	r22
     a24:	b3 95       	inc	r27
     a26:	d9 f7       	brne	.-10     	; 0xa1e <__fixunssfsi+0x3c>
     a28:	3e f4       	brtc	.+14     	; 0xa38 <__fixunssfsi+0x56>
     a2a:	90 95       	com	r25
     a2c:	80 95       	com	r24
     a2e:	70 95       	com	r23
     a30:	61 95       	neg	r22
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	8f 4f       	sbci	r24, 0xFF	; 255
     a36:	9f 4f       	sbci	r25, 0xFF	; 255
     a38:	08 95       	ret

00000a3a <__floatunsisf>:
     a3a:	e8 94       	clt
     a3c:	09 c0       	rjmp	.+18     	; 0xa50 <__floatsisf+0x12>

00000a3e <__floatsisf>:
     a3e:	97 fb       	bst	r25, 7
     a40:	3e f4       	brtc	.+14     	; 0xa50 <__floatsisf+0x12>
     a42:	90 95       	com	r25
     a44:	80 95       	com	r24
     a46:	70 95       	com	r23
     a48:	61 95       	neg	r22
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	8f 4f       	sbci	r24, 0xFF	; 255
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	99 23       	and	r25, r25
     a52:	a9 f0       	breq	.+42     	; 0xa7e <__floatsisf+0x40>
     a54:	f9 2f       	mov	r31, r25
     a56:	96 e9       	ldi	r25, 0x96	; 150
     a58:	bb 27       	eor	r27, r27
     a5a:	93 95       	inc	r25
     a5c:	f6 95       	lsr	r31
     a5e:	87 95       	ror	r24
     a60:	77 95       	ror	r23
     a62:	67 95       	ror	r22
     a64:	b7 95       	ror	r27
     a66:	f1 11       	cpse	r31, r1
     a68:	f8 cf       	rjmp	.-16     	; 0xa5a <__floatsisf+0x1c>
     a6a:	fa f4       	brpl	.+62     	; 0xaaa <__floatsisf+0x6c>
     a6c:	bb 0f       	add	r27, r27
     a6e:	11 f4       	brne	.+4      	; 0xa74 <__floatsisf+0x36>
     a70:	60 ff       	sbrs	r22, 0
     a72:	1b c0       	rjmp	.+54     	; 0xaaa <__floatsisf+0x6c>
     a74:	6f 5f       	subi	r22, 0xFF	; 255
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	8f 4f       	sbci	r24, 0xFF	; 255
     a7a:	9f 4f       	sbci	r25, 0xFF	; 255
     a7c:	16 c0       	rjmp	.+44     	; 0xaaa <__floatsisf+0x6c>
     a7e:	88 23       	and	r24, r24
     a80:	11 f0       	breq	.+4      	; 0xa86 <__floatsisf+0x48>
     a82:	96 e9       	ldi	r25, 0x96	; 150
     a84:	11 c0       	rjmp	.+34     	; 0xaa8 <__floatsisf+0x6a>
     a86:	77 23       	and	r23, r23
     a88:	21 f0       	breq	.+8      	; 0xa92 <__floatsisf+0x54>
     a8a:	9e e8       	ldi	r25, 0x8E	; 142
     a8c:	87 2f       	mov	r24, r23
     a8e:	76 2f       	mov	r23, r22
     a90:	05 c0       	rjmp	.+10     	; 0xa9c <__floatsisf+0x5e>
     a92:	66 23       	and	r22, r22
     a94:	71 f0       	breq	.+28     	; 0xab2 <__floatsisf+0x74>
     a96:	96 e8       	ldi	r25, 0x86	; 134
     a98:	86 2f       	mov	r24, r22
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	2a f0       	brmi	.+10     	; 0xaaa <__floatsisf+0x6c>
     aa0:	9a 95       	dec	r25
     aa2:	66 0f       	add	r22, r22
     aa4:	77 1f       	adc	r23, r23
     aa6:	88 1f       	adc	r24, r24
     aa8:	da f7       	brpl	.-10     	; 0xaa0 <__floatsisf+0x62>
     aaa:	88 0f       	add	r24, r24
     aac:	96 95       	lsr	r25
     aae:	87 95       	ror	r24
     ab0:	97 f9       	bld	r25, 7
     ab2:	08 95       	ret

00000ab4 <__fp_cmp>:
     ab4:	99 0f       	add	r25, r25
     ab6:	00 08       	sbc	r0, r0
     ab8:	55 0f       	add	r21, r21
     aba:	aa 0b       	sbc	r26, r26
     abc:	e0 e8       	ldi	r30, 0x80	; 128
     abe:	fe ef       	ldi	r31, 0xFE	; 254
     ac0:	16 16       	cp	r1, r22
     ac2:	17 06       	cpc	r1, r23
     ac4:	e8 07       	cpc	r30, r24
     ac6:	f9 07       	cpc	r31, r25
     ac8:	c0 f0       	brcs	.+48     	; 0xafa <__fp_cmp+0x46>
     aca:	12 16       	cp	r1, r18
     acc:	13 06       	cpc	r1, r19
     ace:	e4 07       	cpc	r30, r20
     ad0:	f5 07       	cpc	r31, r21
     ad2:	98 f0       	brcs	.+38     	; 0xafa <__fp_cmp+0x46>
     ad4:	62 1b       	sub	r22, r18
     ad6:	73 0b       	sbc	r23, r19
     ad8:	84 0b       	sbc	r24, r20
     ada:	95 0b       	sbc	r25, r21
     adc:	39 f4       	brne	.+14     	; 0xaec <__fp_cmp+0x38>
     ade:	0a 26       	eor	r0, r26
     ae0:	61 f0       	breq	.+24     	; 0xafa <__fp_cmp+0x46>
     ae2:	23 2b       	or	r18, r19
     ae4:	24 2b       	or	r18, r20
     ae6:	25 2b       	or	r18, r21
     ae8:	21 f4       	brne	.+8      	; 0xaf2 <__fp_cmp+0x3e>
     aea:	08 95       	ret
     aec:	0a 26       	eor	r0, r26
     aee:	09 f4       	brne	.+2      	; 0xaf2 <__fp_cmp+0x3e>
     af0:	a1 40       	sbci	r26, 0x01	; 1
     af2:	a6 95       	lsr	r26
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	81 1d       	adc	r24, r1
     af8:	81 1d       	adc	r24, r1
     afa:	08 95       	ret

00000afc <__fp_inf>:
     afc:	97 f9       	bld	r25, 7
     afe:	9f 67       	ori	r25, 0x7F	; 127
     b00:	80 e8       	ldi	r24, 0x80	; 128
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	08 95       	ret

00000b08 <__fp_nan>:
     b08:	9f ef       	ldi	r25, 0xFF	; 255
     b0a:	80 ec       	ldi	r24, 0xC0	; 192
     b0c:	08 95       	ret

00000b0e <__fp_pscA>:
     b0e:	00 24       	eor	r0, r0
     b10:	0a 94       	dec	r0
     b12:	16 16       	cp	r1, r22
     b14:	17 06       	cpc	r1, r23
     b16:	18 06       	cpc	r1, r24
     b18:	09 06       	cpc	r0, r25
     b1a:	08 95       	ret

00000b1c <__fp_pscB>:
     b1c:	00 24       	eor	r0, r0
     b1e:	0a 94       	dec	r0
     b20:	12 16       	cp	r1, r18
     b22:	13 06       	cpc	r1, r19
     b24:	14 06       	cpc	r1, r20
     b26:	05 06       	cpc	r0, r21
     b28:	08 95       	ret

00000b2a <__fp_round>:
     b2a:	09 2e       	mov	r0, r25
     b2c:	03 94       	inc	r0
     b2e:	00 0c       	add	r0, r0
     b30:	11 f4       	brne	.+4      	; 0xb36 <__fp_round+0xc>
     b32:	88 23       	and	r24, r24
     b34:	52 f0       	brmi	.+20     	; 0xb4a <__fp_round+0x20>
     b36:	bb 0f       	add	r27, r27
     b38:	40 f4       	brcc	.+16     	; 0xb4a <__fp_round+0x20>
     b3a:	bf 2b       	or	r27, r31
     b3c:	11 f4       	brne	.+4      	; 0xb42 <__fp_round+0x18>
     b3e:	60 ff       	sbrs	r22, 0
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <__fp_round+0x20>
     b42:	6f 5f       	subi	r22, 0xFF	; 255
     b44:	7f 4f       	sbci	r23, 0xFF	; 255
     b46:	8f 4f       	sbci	r24, 0xFF	; 255
     b48:	9f 4f       	sbci	r25, 0xFF	; 255
     b4a:	08 95       	ret

00000b4c <__fp_split3>:
     b4c:	57 fd       	sbrc	r21, 7
     b4e:	90 58       	subi	r25, 0x80	; 128
     b50:	44 0f       	add	r20, r20
     b52:	55 1f       	adc	r21, r21
     b54:	59 f0       	breq	.+22     	; 0xb6c <__fp_splitA+0x10>
     b56:	5f 3f       	cpi	r21, 0xFF	; 255
     b58:	71 f0       	breq	.+28     	; 0xb76 <__fp_splitA+0x1a>
     b5a:	47 95       	ror	r20

00000b5c <__fp_splitA>:
     b5c:	88 0f       	add	r24, r24
     b5e:	97 fb       	bst	r25, 7
     b60:	99 1f       	adc	r25, r25
     b62:	61 f0       	breq	.+24     	; 0xb7c <__fp_splitA+0x20>
     b64:	9f 3f       	cpi	r25, 0xFF	; 255
     b66:	79 f0       	breq	.+30     	; 0xb86 <__fp_splitA+0x2a>
     b68:	87 95       	ror	r24
     b6a:	08 95       	ret
     b6c:	12 16       	cp	r1, r18
     b6e:	13 06       	cpc	r1, r19
     b70:	14 06       	cpc	r1, r20
     b72:	55 1f       	adc	r21, r21
     b74:	f2 cf       	rjmp	.-28     	; 0xb5a <__fp_split3+0xe>
     b76:	46 95       	lsr	r20
     b78:	f1 df       	rcall	.-30     	; 0xb5c <__fp_splitA>
     b7a:	08 c0       	rjmp	.+16     	; 0xb8c <__fp_splitA+0x30>
     b7c:	16 16       	cp	r1, r22
     b7e:	17 06       	cpc	r1, r23
     b80:	18 06       	cpc	r1, r24
     b82:	99 1f       	adc	r25, r25
     b84:	f1 cf       	rjmp	.-30     	; 0xb68 <__fp_splitA+0xc>
     b86:	86 95       	lsr	r24
     b88:	71 05       	cpc	r23, r1
     b8a:	61 05       	cpc	r22, r1
     b8c:	08 94       	sec
     b8e:	08 95       	ret

00000b90 <__fp_zero>:
     b90:	e8 94       	clt

00000b92 <__fp_szero>:
     b92:	bb 27       	eor	r27, r27
     b94:	66 27       	eor	r22, r22
     b96:	77 27       	eor	r23, r23
     b98:	cb 01       	movw	r24, r22
     b9a:	97 f9       	bld	r25, 7
     b9c:	08 95       	ret

00000b9e <__gesf2>:
     b9e:	8a df       	rcall	.-236    	; 0xab4 <__fp_cmp>
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <__gesf2+0x6>
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	08 95       	ret

00000ba6 <__mulsf3>:
     ba6:	0b d0       	rcall	.+22     	; 0xbbe <__mulsf3x>
     ba8:	c0 cf       	rjmp	.-128    	; 0xb2a <__fp_round>
     baa:	b1 df       	rcall	.-158    	; 0xb0e <__fp_pscA>
     bac:	28 f0       	brcs	.+10     	; 0xbb8 <__mulsf3+0x12>
     bae:	b6 df       	rcall	.-148    	; 0xb1c <__fp_pscB>
     bb0:	18 f0       	brcs	.+6      	; 0xbb8 <__mulsf3+0x12>
     bb2:	95 23       	and	r25, r21
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <__mulsf3+0x12>
     bb6:	a2 cf       	rjmp	.-188    	; 0xafc <__fp_inf>
     bb8:	a7 cf       	rjmp	.-178    	; 0xb08 <__fp_nan>
     bba:	11 24       	eor	r1, r1
     bbc:	ea cf       	rjmp	.-44     	; 0xb92 <__fp_szero>

00000bbe <__mulsf3x>:
     bbe:	c6 df       	rcall	.-116    	; 0xb4c <__fp_split3>
     bc0:	a0 f3       	brcs	.-24     	; 0xbaa <__mulsf3+0x4>

00000bc2 <__mulsf3_pse>:
     bc2:	95 9f       	mul	r25, r21
     bc4:	d1 f3       	breq	.-12     	; 0xbba <__mulsf3+0x14>
     bc6:	95 0f       	add	r25, r21
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	55 1f       	adc	r21, r21
     bcc:	62 9f       	mul	r22, r18
     bce:	f0 01       	movw	r30, r0
     bd0:	72 9f       	mul	r23, r18
     bd2:	bb 27       	eor	r27, r27
     bd4:	f0 0d       	add	r31, r0
     bd6:	b1 1d       	adc	r27, r1
     bd8:	63 9f       	mul	r22, r19
     bda:	aa 27       	eor	r26, r26
     bdc:	f0 0d       	add	r31, r0
     bde:	b1 1d       	adc	r27, r1
     be0:	aa 1f       	adc	r26, r26
     be2:	64 9f       	mul	r22, r20
     be4:	66 27       	eor	r22, r22
     be6:	b0 0d       	add	r27, r0
     be8:	a1 1d       	adc	r26, r1
     bea:	66 1f       	adc	r22, r22
     bec:	82 9f       	mul	r24, r18
     bee:	22 27       	eor	r18, r18
     bf0:	b0 0d       	add	r27, r0
     bf2:	a1 1d       	adc	r26, r1
     bf4:	62 1f       	adc	r22, r18
     bf6:	73 9f       	mul	r23, r19
     bf8:	b0 0d       	add	r27, r0
     bfa:	a1 1d       	adc	r26, r1
     bfc:	62 1f       	adc	r22, r18
     bfe:	83 9f       	mul	r24, r19
     c00:	a0 0d       	add	r26, r0
     c02:	61 1d       	adc	r22, r1
     c04:	22 1f       	adc	r18, r18
     c06:	74 9f       	mul	r23, r20
     c08:	33 27       	eor	r19, r19
     c0a:	a0 0d       	add	r26, r0
     c0c:	61 1d       	adc	r22, r1
     c0e:	23 1f       	adc	r18, r19
     c10:	84 9f       	mul	r24, r20
     c12:	60 0d       	add	r22, r0
     c14:	21 1d       	adc	r18, r1
     c16:	82 2f       	mov	r24, r18
     c18:	76 2f       	mov	r23, r22
     c1a:	6a 2f       	mov	r22, r26
     c1c:	11 24       	eor	r1, r1
     c1e:	9f 57       	subi	r25, 0x7F	; 127
     c20:	50 40       	sbci	r21, 0x00	; 0
     c22:	8a f0       	brmi	.+34     	; 0xc46 <__mulsf3_pse+0x84>
     c24:	e1 f0       	breq	.+56     	; 0xc5e <__mulsf3_pse+0x9c>
     c26:	88 23       	and	r24, r24
     c28:	4a f0       	brmi	.+18     	; 0xc3c <__mulsf3_pse+0x7a>
     c2a:	ee 0f       	add	r30, r30
     c2c:	ff 1f       	adc	r31, r31
     c2e:	bb 1f       	adc	r27, r27
     c30:	66 1f       	adc	r22, r22
     c32:	77 1f       	adc	r23, r23
     c34:	88 1f       	adc	r24, r24
     c36:	91 50       	subi	r25, 0x01	; 1
     c38:	50 40       	sbci	r21, 0x00	; 0
     c3a:	a9 f7       	brne	.-22     	; 0xc26 <__mulsf3_pse+0x64>
     c3c:	9e 3f       	cpi	r25, 0xFE	; 254
     c3e:	51 05       	cpc	r21, r1
     c40:	70 f0       	brcs	.+28     	; 0xc5e <__mulsf3_pse+0x9c>
     c42:	5c cf       	rjmp	.-328    	; 0xafc <__fp_inf>
     c44:	a6 cf       	rjmp	.-180    	; 0xb92 <__fp_szero>
     c46:	5f 3f       	cpi	r21, 0xFF	; 255
     c48:	ec f3       	brlt	.-6      	; 0xc44 <__mulsf3_pse+0x82>
     c4a:	98 3e       	cpi	r25, 0xE8	; 232
     c4c:	dc f3       	brlt	.-10     	; 0xc44 <__mulsf3_pse+0x82>
     c4e:	86 95       	lsr	r24
     c50:	77 95       	ror	r23
     c52:	67 95       	ror	r22
     c54:	b7 95       	ror	r27
     c56:	f7 95       	ror	r31
     c58:	e7 95       	ror	r30
     c5a:	9f 5f       	subi	r25, 0xFF	; 255
     c5c:	c1 f7       	brne	.-16     	; 0xc4e <__mulsf3_pse+0x8c>
     c5e:	fe 2b       	or	r31, r30
     c60:	88 0f       	add	r24, r24
     c62:	91 1d       	adc	r25, r1
     c64:	96 95       	lsr	r25
     c66:	87 95       	ror	r24
     c68:	97 f9       	bld	r25, 7
     c6a:	08 95       	ret

00000c6c <atoi>:
     c6c:	fc 01       	movw	r30, r24
     c6e:	88 27       	eor	r24, r24
     c70:	99 27       	eor	r25, r25
     c72:	e8 94       	clt
     c74:	21 91       	ld	r18, Z+
     c76:	20 32       	cpi	r18, 0x20	; 32
     c78:	e9 f3       	breq	.-6      	; 0xc74 <atoi+0x8>
     c7a:	29 30       	cpi	r18, 0x09	; 9
     c7c:	10 f0       	brcs	.+4      	; 0xc82 <atoi+0x16>
     c7e:	2e 30       	cpi	r18, 0x0E	; 14
     c80:	c8 f3       	brcs	.-14     	; 0xc74 <atoi+0x8>
     c82:	2b 32       	cpi	r18, 0x2B	; 43
     c84:	41 f0       	breq	.+16     	; 0xc96 <atoi+0x2a>
     c86:	2d 32       	cpi	r18, 0x2D	; 45
     c88:	39 f4       	brne	.+14     	; 0xc98 <atoi+0x2c>
     c8a:	68 94       	set
     c8c:	04 c0       	rjmp	.+8      	; 0xc96 <atoi+0x2a>
     c8e:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulhi_const_10>
     c92:	82 0f       	add	r24, r18
     c94:	91 1d       	adc	r25, r1
     c96:	21 91       	ld	r18, Z+
     c98:	20 53       	subi	r18, 0x30	; 48
     c9a:	2a 30       	cpi	r18, 0x0A	; 10
     c9c:	c0 f3       	brcs	.-16     	; 0xc8e <atoi+0x22>
     c9e:	1e f4       	brtc	.+6      	; 0xca6 <atoi+0x3a>
     ca0:	90 95       	com	r25
     ca2:	81 95       	neg	r24
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	08 95       	ret

00000ca8 <__mulhi_const_10>:
     ca8:	7a e0       	ldi	r23, 0x0A	; 10
     caa:	97 9f       	mul	r25, r23
     cac:	90 2d       	mov	r25, r0
     cae:	87 9f       	mul	r24, r23
     cb0:	80 2d       	mov	r24, r0
     cb2:	91 0d       	add	r25, r1
     cb4:	11 24       	eor	r1, r1
     cb6:	08 95       	ret

00000cb8 <sprintf>:
     cb8:	ae e0       	ldi	r26, 0x0E	; 14
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e2 e6       	ldi	r30, 0x62	; 98
     cbe:	f6 e0       	ldi	r31, 0x06	; 6
     cc0:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__prologue_saves__+0x1c>
     cc4:	0d 89       	ldd	r16, Y+21	; 0x15
     cc6:	1e 89       	ldd	r17, Y+22	; 0x16
     cc8:	86 e0       	ldi	r24, 0x06	; 6
     cca:	8c 83       	std	Y+4, r24	; 0x04
     ccc:	1a 83       	std	Y+2, r17	; 0x02
     cce:	09 83       	std	Y+1, r16	; 0x01
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	9f e7       	ldi	r25, 0x7F	; 127
     cd4:	9e 83       	std	Y+6, r25	; 0x06
     cd6:	8d 83       	std	Y+5, r24	; 0x05
     cd8:	ae 01       	movw	r20, r28
     cda:	47 5e       	subi	r20, 0xE7	; 231
     cdc:	5f 4f       	sbci	r21, 0xFF	; 255
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	6f 89       	ldd	r22, Y+23	; 0x17
     ce4:	78 8d       	ldd	r23, Y+24	; 0x18
     ce6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vfprintf>
     cea:	ef 81       	ldd	r30, Y+7	; 0x07
     cec:	f8 85       	ldd	r31, Y+8	; 0x08
     cee:	e0 0f       	add	r30, r16
     cf0:	f1 1f       	adc	r31, r17
     cf2:	10 82       	st	Z, r1
     cf4:	2e 96       	adiw	r28, 0x0e	; 14
     cf6:	e4 e0       	ldi	r30, 0x04	; 4
     cf8:	0c 94 26 09 	jmp	0x124c	; 0x124c <__epilogue_restores__+0x1c>

00000cfc <vfprintf>:
     cfc:	ad e0       	ldi	r26, 0x0D	; 13
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e4 e8       	ldi	r30, 0x84	; 132
     d02:	f6 e0       	ldi	r31, 0x06	; 6
     d04:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__prologue_saves__>
     d08:	3c 01       	movw	r6, r24
     d0a:	7d 87       	std	Y+13, r23	; 0x0d
     d0c:	6c 87       	std	Y+12, r22	; 0x0c
     d0e:	5a 01       	movw	r10, r20
     d10:	fc 01       	movw	r30, r24
     d12:	17 82       	std	Z+7, r1	; 0x07
     d14:	16 82       	std	Z+6, r1	; 0x06
     d16:	83 81       	ldd	r24, Z+3	; 0x03
     d18:	81 ff       	sbrs	r24, 1
     d1a:	c8 c1       	rjmp	.+912    	; 0x10ac <vfprintf+0x3b0>
     d1c:	2e 01       	movw	r4, r28
     d1e:	08 94       	sec
     d20:	41 1c       	adc	r4, r1
     d22:	51 1c       	adc	r5, r1
     d24:	f3 01       	movw	r30, r6
     d26:	93 81       	ldd	r25, Z+3	; 0x03
     d28:	ec 85       	ldd	r30, Y+12	; 0x0c
     d2a:	fd 85       	ldd	r31, Y+13	; 0x0d
     d2c:	93 fd       	sbrc	r25, 3
     d2e:	85 91       	lpm	r24, Z+
     d30:	93 ff       	sbrs	r25, 3
     d32:	81 91       	ld	r24, Z+
     d34:	fd 87       	std	Y+13, r31	; 0x0d
     d36:	ec 87       	std	Y+12, r30	; 0x0c
     d38:	88 23       	and	r24, r24
     d3a:	09 f4       	brne	.+2      	; 0xd3e <vfprintf+0x42>
     d3c:	b3 c1       	rjmp	.+870    	; 0x10a4 <vfprintf+0x3a8>
     d3e:	85 32       	cpi	r24, 0x25	; 37
     d40:	41 f4       	brne	.+16     	; 0xd52 <vfprintf+0x56>
     d42:	93 fd       	sbrc	r25, 3
     d44:	85 91       	lpm	r24, Z+
     d46:	93 ff       	sbrs	r25, 3
     d48:	81 91       	ld	r24, Z+
     d4a:	fd 87       	std	Y+13, r31	; 0x0d
     d4c:	ec 87       	std	Y+12, r30	; 0x0c
     d4e:	85 32       	cpi	r24, 0x25	; 37
     d50:	29 f4       	brne	.+10     	; 0xd5c <vfprintf+0x60>
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	b3 01       	movw	r22, r6
     d56:	0e 94 72 08 	call	0x10e4	; 0x10e4 <fputc>
     d5a:	e4 cf       	rjmp	.-56     	; 0xd24 <vfprintf+0x28>
     d5c:	ff 24       	eor	r15, r15
     d5e:	ee 24       	eor	r14, r14
     d60:	10 e0       	ldi	r17, 0x00	; 0
     d62:	10 32       	cpi	r17, 0x20	; 32
     d64:	b0 f4       	brcc	.+44     	; 0xd92 <vfprintf+0x96>
     d66:	8b 32       	cpi	r24, 0x2B	; 43
     d68:	69 f0       	breq	.+26     	; 0xd84 <vfprintf+0x88>
     d6a:	8c 32       	cpi	r24, 0x2C	; 44
     d6c:	28 f4       	brcc	.+10     	; 0xd78 <vfprintf+0x7c>
     d6e:	80 32       	cpi	r24, 0x20	; 32
     d70:	51 f0       	breq	.+20     	; 0xd86 <vfprintf+0x8a>
     d72:	83 32       	cpi	r24, 0x23	; 35
     d74:	71 f4       	brne	.+28     	; 0xd92 <vfprintf+0x96>
     d76:	0b c0       	rjmp	.+22     	; 0xd8e <vfprintf+0x92>
     d78:	8d 32       	cpi	r24, 0x2D	; 45
     d7a:	39 f0       	breq	.+14     	; 0xd8a <vfprintf+0x8e>
     d7c:	80 33       	cpi	r24, 0x30	; 48
     d7e:	49 f4       	brne	.+18     	; 0xd92 <vfprintf+0x96>
     d80:	11 60       	ori	r17, 0x01	; 1
     d82:	2c c0       	rjmp	.+88     	; 0xddc <vfprintf+0xe0>
     d84:	12 60       	ori	r17, 0x02	; 2
     d86:	14 60       	ori	r17, 0x04	; 4
     d88:	29 c0       	rjmp	.+82     	; 0xddc <vfprintf+0xe0>
     d8a:	18 60       	ori	r17, 0x08	; 8
     d8c:	27 c0       	rjmp	.+78     	; 0xddc <vfprintf+0xe0>
     d8e:	10 61       	ori	r17, 0x10	; 16
     d90:	25 c0       	rjmp	.+74     	; 0xddc <vfprintf+0xe0>
     d92:	17 fd       	sbrc	r17, 7
     d94:	2e c0       	rjmp	.+92     	; 0xdf2 <vfprintf+0xf6>
     d96:	28 2f       	mov	r18, r24
     d98:	20 53       	subi	r18, 0x30	; 48
     d9a:	2a 30       	cpi	r18, 0x0A	; 10
     d9c:	98 f4       	brcc	.+38     	; 0xdc4 <vfprintf+0xc8>
     d9e:	16 ff       	sbrs	r17, 6
     da0:	08 c0       	rjmp	.+16     	; 0xdb2 <vfprintf+0xb6>
     da2:	8f 2d       	mov	r24, r15
     da4:	88 0f       	add	r24, r24
     da6:	f8 2e       	mov	r15, r24
     da8:	ff 0c       	add	r15, r15
     daa:	ff 0c       	add	r15, r15
     dac:	f8 0e       	add	r15, r24
     dae:	f2 0e       	add	r15, r18
     db0:	15 c0       	rjmp	.+42     	; 0xddc <vfprintf+0xe0>
     db2:	8e 2d       	mov	r24, r14
     db4:	88 0f       	add	r24, r24
     db6:	e8 2e       	mov	r14, r24
     db8:	ee 0c       	add	r14, r14
     dba:	ee 0c       	add	r14, r14
     dbc:	e8 0e       	add	r14, r24
     dbe:	e2 0e       	add	r14, r18
     dc0:	10 62       	ori	r17, 0x20	; 32
     dc2:	0c c0       	rjmp	.+24     	; 0xddc <vfprintf+0xe0>
     dc4:	8e 32       	cpi	r24, 0x2E	; 46
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <vfprintf+0xd4>
     dc8:	16 fd       	sbrc	r17, 6
     dca:	6c c1       	rjmp	.+728    	; 0x10a4 <vfprintf+0x3a8>
     dcc:	10 64       	ori	r17, 0x40	; 64
     dce:	06 c0       	rjmp	.+12     	; 0xddc <vfprintf+0xe0>
     dd0:	8c 36       	cpi	r24, 0x6C	; 108
     dd2:	11 f4       	brne	.+4      	; 0xdd8 <vfprintf+0xdc>
     dd4:	10 68       	ori	r17, 0x80	; 128
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <vfprintf+0xe0>
     dd8:	88 36       	cpi	r24, 0x68	; 104
     dda:	59 f4       	brne	.+22     	; 0xdf2 <vfprintf+0xf6>
     ddc:	ec 85       	ldd	r30, Y+12	; 0x0c
     dde:	fd 85       	ldd	r31, Y+13	; 0x0d
     de0:	93 fd       	sbrc	r25, 3
     de2:	85 91       	lpm	r24, Z+
     de4:	93 ff       	sbrs	r25, 3
     de6:	81 91       	ld	r24, Z+
     de8:	fd 87       	std	Y+13, r31	; 0x0d
     dea:	ec 87       	std	Y+12, r30	; 0x0c
     dec:	88 23       	and	r24, r24
     dee:	09 f0       	breq	.+2      	; 0xdf2 <vfprintf+0xf6>
     df0:	b8 cf       	rjmp	.-144    	; 0xd62 <vfprintf+0x66>
     df2:	98 2f       	mov	r25, r24
     df4:	95 54       	subi	r25, 0x45	; 69
     df6:	93 30       	cpi	r25, 0x03	; 3
     df8:	18 f0       	brcs	.+6      	; 0xe00 <vfprintf+0x104>
     dfa:	90 52       	subi	r25, 0x20	; 32
     dfc:	93 30       	cpi	r25, 0x03	; 3
     dfe:	38 f4       	brcc	.+14     	; 0xe0e <vfprintf+0x112>
     e00:	24 e0       	ldi	r18, 0x04	; 4
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	a2 0e       	add	r10, r18
     e06:	b3 1e       	adc	r11, r19
     e08:	3f e3       	ldi	r19, 0x3F	; 63
     e0a:	39 83       	std	Y+1, r19	; 0x01
     e0c:	0f c0       	rjmp	.+30     	; 0xe2c <vfprintf+0x130>
     e0e:	83 36       	cpi	r24, 0x63	; 99
     e10:	31 f0       	breq	.+12     	; 0xe1e <vfprintf+0x122>
     e12:	83 37       	cpi	r24, 0x73	; 115
     e14:	81 f0       	breq	.+32     	; 0xe36 <vfprintf+0x13a>
     e16:	83 35       	cpi	r24, 0x53	; 83
     e18:	09 f0       	breq	.+2      	; 0xe1c <vfprintf+0x120>
     e1a:	5a c0       	rjmp	.+180    	; 0xed0 <vfprintf+0x1d4>
     e1c:	22 c0       	rjmp	.+68     	; 0xe62 <vfprintf+0x166>
     e1e:	f5 01       	movw	r30, r10
     e20:	80 81       	ld	r24, Z
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	22 e0       	ldi	r18, 0x02	; 2
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	a2 0e       	add	r10, r18
     e2a:	b3 1e       	adc	r11, r19
     e2c:	21 e0       	ldi	r18, 0x01	; 1
     e2e:	c2 2e       	mov	r12, r18
     e30:	d1 2c       	mov	r13, r1
     e32:	42 01       	movw	r8, r4
     e34:	14 c0       	rjmp	.+40     	; 0xe5e <vfprintf+0x162>
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	29 2e       	mov	r2, r25
     e3a:	31 2c       	mov	r3, r1
     e3c:	2a 0c       	add	r2, r10
     e3e:	3b 1c       	adc	r3, r11
     e40:	f5 01       	movw	r30, r10
     e42:	80 80       	ld	r8, Z
     e44:	91 80       	ldd	r9, Z+1	; 0x01
     e46:	16 ff       	sbrs	r17, 6
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <vfprintf+0x154>
     e4a:	6f 2d       	mov	r22, r15
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <vfprintf+0x158>
     e50:	6f ef       	ldi	r22, 0xFF	; 255
     e52:	7f ef       	ldi	r23, 0xFF	; 255
     e54:	c4 01       	movw	r24, r8
     e56:	0e 94 67 08 	call	0x10ce	; 0x10ce <strnlen>
     e5a:	6c 01       	movw	r12, r24
     e5c:	51 01       	movw	r10, r2
     e5e:	1f 77       	andi	r17, 0x7F	; 127
     e60:	15 c0       	rjmp	.+42     	; 0xe8c <vfprintf+0x190>
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	28 2e       	mov	r2, r24
     e66:	31 2c       	mov	r3, r1
     e68:	2a 0c       	add	r2, r10
     e6a:	3b 1c       	adc	r3, r11
     e6c:	f5 01       	movw	r30, r10
     e6e:	80 80       	ld	r8, Z
     e70:	91 80       	ldd	r9, Z+1	; 0x01
     e72:	16 ff       	sbrs	r17, 6
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <vfprintf+0x180>
     e76:	6f 2d       	mov	r22, r15
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <vfprintf+0x184>
     e7c:	6f ef       	ldi	r22, 0xFF	; 255
     e7e:	7f ef       	ldi	r23, 0xFF	; 255
     e80:	c4 01       	movw	r24, r8
     e82:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <strnlen_P>
     e86:	6c 01       	movw	r12, r24
     e88:	10 68       	ori	r17, 0x80	; 128
     e8a:	51 01       	movw	r10, r2
     e8c:	13 fd       	sbrc	r17, 3
     e8e:	1c c0       	rjmp	.+56     	; 0xec8 <vfprintf+0x1cc>
     e90:	06 c0       	rjmp	.+12     	; 0xe9e <vfprintf+0x1a2>
     e92:	80 e2       	ldi	r24, 0x20	; 32
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	b3 01       	movw	r22, r6
     e98:	0e 94 72 08 	call	0x10e4	; 0x10e4 <fputc>
     e9c:	ea 94       	dec	r14
     e9e:	8e 2d       	mov	r24, r14
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	c8 16       	cp	r12, r24
     ea4:	d9 06       	cpc	r13, r25
     ea6:	a8 f3       	brcs	.-22     	; 0xe92 <vfprintf+0x196>
     ea8:	0f c0       	rjmp	.+30     	; 0xec8 <vfprintf+0x1cc>
     eaa:	f4 01       	movw	r30, r8
     eac:	17 fd       	sbrc	r17, 7
     eae:	85 91       	lpm	r24, Z+
     eb0:	17 ff       	sbrs	r17, 7
     eb2:	81 91       	ld	r24, Z+
     eb4:	4f 01       	movw	r8, r30
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	b3 01       	movw	r22, r6
     eba:	0e 94 72 08 	call	0x10e4	; 0x10e4 <fputc>
     ebe:	e1 10       	cpse	r14, r1
     ec0:	ea 94       	dec	r14
     ec2:	08 94       	sec
     ec4:	c1 08       	sbc	r12, r1
     ec6:	d1 08       	sbc	r13, r1
     ec8:	c1 14       	cp	r12, r1
     eca:	d1 04       	cpc	r13, r1
     ecc:	71 f7       	brne	.-36     	; 0xeaa <vfprintf+0x1ae>
     ece:	e7 c0       	rjmp	.+462    	; 0x109e <vfprintf+0x3a2>
     ed0:	84 36       	cpi	r24, 0x64	; 100
     ed2:	11 f0       	breq	.+4      	; 0xed8 <vfprintf+0x1dc>
     ed4:	89 36       	cpi	r24, 0x69	; 105
     ed6:	51 f5       	brne	.+84     	; 0xf2c <vfprintf+0x230>
     ed8:	f5 01       	movw	r30, r10
     eda:	17 ff       	sbrs	r17, 7
     edc:	07 c0       	rjmp	.+14     	; 0xeec <vfprintf+0x1f0>
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	a2 81       	ldd	r26, Z+2	; 0x02
     ee4:	b3 81       	ldd	r27, Z+3	; 0x03
     ee6:	24 e0       	ldi	r18, 0x04	; 4
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	08 c0       	rjmp	.+16     	; 0xefc <vfprintf+0x200>
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	aa 27       	eor	r26, r26
     ef2:	97 fd       	sbrc	r25, 7
     ef4:	a0 95       	com	r26
     ef6:	ba 2f       	mov	r27, r26
     ef8:	22 e0       	ldi	r18, 0x02	; 2
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	a2 0e       	add	r10, r18
     efe:	b3 1e       	adc	r11, r19
     f00:	01 2f       	mov	r16, r17
     f02:	0f 76       	andi	r16, 0x6F	; 111
     f04:	b7 ff       	sbrs	r27, 7
     f06:	08 c0       	rjmp	.+16     	; 0xf18 <vfprintf+0x21c>
     f08:	b0 95       	com	r27
     f0a:	a0 95       	com	r26
     f0c:	90 95       	com	r25
     f0e:	81 95       	neg	r24
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	af 4f       	sbci	r26, 0xFF	; 255
     f14:	bf 4f       	sbci	r27, 0xFF	; 255
     f16:	00 68       	ori	r16, 0x80	; 128
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	a2 01       	movw	r20, r4
     f1e:	2a e0       	ldi	r18, 0x0A	; 10
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	0e 94 9e 08 	call	0x113c	; 0x113c <__ultoa_invert>
     f26:	d8 2e       	mov	r13, r24
     f28:	d4 18       	sub	r13, r4
     f2a:	3f c0       	rjmp	.+126    	; 0xfaa <vfprintf+0x2ae>
     f2c:	85 37       	cpi	r24, 0x75	; 117
     f2e:	21 f4       	brne	.+8      	; 0xf38 <vfprintf+0x23c>
     f30:	1f 7e       	andi	r17, 0xEF	; 239
     f32:	2a e0       	ldi	r18, 0x0A	; 10
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	20 c0       	rjmp	.+64     	; 0xf78 <vfprintf+0x27c>
     f38:	19 7f       	andi	r17, 0xF9	; 249
     f3a:	8f 36       	cpi	r24, 0x6F	; 111
     f3c:	a9 f0       	breq	.+42     	; 0xf68 <vfprintf+0x26c>
     f3e:	80 37       	cpi	r24, 0x70	; 112
     f40:	20 f4       	brcc	.+8      	; 0xf4a <vfprintf+0x24e>
     f42:	88 35       	cpi	r24, 0x58	; 88
     f44:	09 f0       	breq	.+2      	; 0xf48 <vfprintf+0x24c>
     f46:	ae c0       	rjmp	.+348    	; 0x10a4 <vfprintf+0x3a8>
     f48:	0b c0       	rjmp	.+22     	; 0xf60 <vfprintf+0x264>
     f4a:	80 37       	cpi	r24, 0x70	; 112
     f4c:	21 f0       	breq	.+8      	; 0xf56 <vfprintf+0x25a>
     f4e:	88 37       	cpi	r24, 0x78	; 120
     f50:	09 f0       	breq	.+2      	; 0xf54 <vfprintf+0x258>
     f52:	a8 c0       	rjmp	.+336    	; 0x10a4 <vfprintf+0x3a8>
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <vfprintf+0x25c>
     f56:	10 61       	ori	r17, 0x10	; 16
     f58:	14 ff       	sbrs	r17, 4
     f5a:	09 c0       	rjmp	.+18     	; 0xf6e <vfprintf+0x272>
     f5c:	14 60       	ori	r17, 0x04	; 4
     f5e:	07 c0       	rjmp	.+14     	; 0xf6e <vfprintf+0x272>
     f60:	14 ff       	sbrs	r17, 4
     f62:	08 c0       	rjmp	.+16     	; 0xf74 <vfprintf+0x278>
     f64:	16 60       	ori	r17, 0x06	; 6
     f66:	06 c0       	rjmp	.+12     	; 0xf74 <vfprintf+0x278>
     f68:	28 e0       	ldi	r18, 0x08	; 8
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	05 c0       	rjmp	.+10     	; 0xf78 <vfprintf+0x27c>
     f6e:	20 e1       	ldi	r18, 0x10	; 16
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <vfprintf+0x27c>
     f74:	20 e1       	ldi	r18, 0x10	; 16
     f76:	32 e0       	ldi	r19, 0x02	; 2
     f78:	f5 01       	movw	r30, r10
     f7a:	17 ff       	sbrs	r17, 7
     f7c:	07 c0       	rjmp	.+14     	; 0xf8c <vfprintf+0x290>
     f7e:	60 81       	ld	r22, Z
     f80:	71 81       	ldd	r23, Z+1	; 0x01
     f82:	82 81       	ldd	r24, Z+2	; 0x02
     f84:	93 81       	ldd	r25, Z+3	; 0x03
     f86:	44 e0       	ldi	r20, 0x04	; 4
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	06 c0       	rjmp	.+12     	; 0xf98 <vfprintf+0x29c>
     f8c:	60 81       	ld	r22, Z
     f8e:	71 81       	ldd	r23, Z+1	; 0x01
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	42 e0       	ldi	r20, 0x02	; 2
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	a4 0e       	add	r10, r20
     f9a:	b5 1e       	adc	r11, r21
     f9c:	a2 01       	movw	r20, r4
     f9e:	0e 94 9e 08 	call	0x113c	; 0x113c <__ultoa_invert>
     fa2:	d8 2e       	mov	r13, r24
     fa4:	d4 18       	sub	r13, r4
     fa6:	01 2f       	mov	r16, r17
     fa8:	0f 77       	andi	r16, 0x7F	; 127
     faa:	06 ff       	sbrs	r16, 6
     fac:	09 c0       	rjmp	.+18     	; 0xfc0 <vfprintf+0x2c4>
     fae:	0e 7f       	andi	r16, 0xFE	; 254
     fb0:	df 14       	cp	r13, r15
     fb2:	30 f4       	brcc	.+12     	; 0xfc0 <vfprintf+0x2c4>
     fb4:	04 ff       	sbrs	r16, 4
     fb6:	06 c0       	rjmp	.+12     	; 0xfc4 <vfprintf+0x2c8>
     fb8:	02 fd       	sbrc	r16, 2
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <vfprintf+0x2c8>
     fbc:	0f 7e       	andi	r16, 0xEF	; 239
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <vfprintf+0x2c8>
     fc0:	1d 2d       	mov	r17, r13
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <vfprintf+0x2ca>
     fc4:	1f 2d       	mov	r17, r15
     fc6:	80 2f       	mov	r24, r16
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	04 ff       	sbrs	r16, 4
     fcc:	0c c0       	rjmp	.+24     	; 0xfe6 <vfprintf+0x2ea>
     fce:	fe 01       	movw	r30, r28
     fd0:	ed 0d       	add	r30, r13
     fd2:	f1 1d       	adc	r31, r1
     fd4:	20 81       	ld	r18, Z
     fd6:	20 33       	cpi	r18, 0x30	; 48
     fd8:	11 f4       	brne	.+4      	; 0xfde <vfprintf+0x2e2>
     fda:	09 7e       	andi	r16, 0xE9	; 233
     fdc:	09 c0       	rjmp	.+18     	; 0xff0 <vfprintf+0x2f4>
     fde:	02 ff       	sbrs	r16, 2
     fe0:	06 c0       	rjmp	.+12     	; 0xfee <vfprintf+0x2f2>
     fe2:	1e 5f       	subi	r17, 0xFE	; 254
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <vfprintf+0x2f4>
     fe6:	86 78       	andi	r24, 0x86	; 134
     fe8:	90 70       	andi	r25, 0x00	; 0
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	09 f0       	breq	.+2      	; 0xff0 <vfprintf+0x2f4>
     fee:	1f 5f       	subi	r17, 0xFF	; 255
     ff0:	80 2e       	mov	r8, r16
     ff2:	99 24       	eor	r9, r9
     ff4:	03 fd       	sbrc	r16, 3
     ff6:	12 c0       	rjmp	.+36     	; 0x101c <vfprintf+0x320>
     ff8:	00 ff       	sbrs	r16, 0
     ffa:	0d c0       	rjmp	.+26     	; 0x1016 <vfprintf+0x31a>
     ffc:	fd 2c       	mov	r15, r13
     ffe:	1e 15       	cp	r17, r14
    1000:	50 f4       	brcc	.+20     	; 0x1016 <vfprintf+0x31a>
    1002:	fe 0c       	add	r15, r14
    1004:	f1 1a       	sub	r15, r17
    1006:	1e 2d       	mov	r17, r14
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <vfprintf+0x31a>
    100a:	80 e2       	ldi	r24, 0x20	; 32
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	b3 01       	movw	r22, r6
    1010:	0e 94 72 08 	call	0x10e4	; 0x10e4 <fputc>
    1014:	1f 5f       	subi	r17, 0xFF	; 255
    1016:	1e 15       	cp	r17, r14
    1018:	c0 f3       	brcs	.-16     	; 0x100a <vfprintf+0x30e>
    101a:	04 c0       	rjmp	.+8      	; 0x1024 <vfprintf+0x328>
    101c:	1e 15       	cp	r17, r14
    101e:	10 f4       	brcc	.+4      	; 0x1024 <vfprintf+0x328>
    1020:	e1 1a       	sub	r14, r17
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <vfprintf+0x32a>
    1024:	ee 24       	eor	r14, r14
    1026:	84 fe       	sbrs	r8, 4
    1028:	0f c0       	rjmp	.+30     	; 0x1048 <vfprintf+0x34c>
    102a:	80 e3       	ldi	r24, 0x30	; 48
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	b3 01       	movw	r22, r6
    1030:	0e 94 72 08 	call	0x10e4	; 0x10e4 <fputc>
    1034:	82 fe       	sbrs	r8, 2
    1036:	1f c0       	rjmp	.+62     	; 0x1076 <vfprintf+0x37a>
    1038:	81 fe       	sbrs	r8, 1
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <vfprintf+0x346>
    103c:	88 e5       	ldi	r24, 0x58	; 88
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	10 c0       	rjmp	.+32     	; 0x1062 <vfprintf+0x366>
    1042:	88 e7       	ldi	r24, 0x78	; 120
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0d c0       	rjmp	.+26     	; 0x1062 <vfprintf+0x366>
    1048:	c4 01       	movw	r24, r8
    104a:	86 78       	andi	r24, 0x86	; 134
    104c:	90 70       	andi	r25, 0x00	; 0
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	91 f0       	breq	.+36     	; 0x1076 <vfprintf+0x37a>
    1052:	81 fc       	sbrc	r8, 1
    1054:	02 c0       	rjmp	.+4      	; 0x105a <vfprintf+0x35e>
    1056:	80 e2       	ldi	r24, 0x20	; 32
    1058:	01 c0       	rjmp	.+2      	; 0x105c <vfprintf+0x360>
    105a:	8b e2       	ldi	r24, 0x2B	; 43
    105c:	07 fd       	sbrc	r16, 7
    105e:	8d e2       	ldi	r24, 0x2D	; 45
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	b3 01       	movw	r22, r6
    1064:	0e 94 72 08 	call	0x10e4	; 0x10e4 <fputc>
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <vfprintf+0x37a>
    106a:	80 e3       	ldi	r24, 0x30	; 48
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	b3 01       	movw	r22, r6
    1070:	0e 94 72 08 	call	0x10e4	; 0x10e4 <fputc>
    1074:	fa 94       	dec	r15
    1076:	df 14       	cp	r13, r15
    1078:	c0 f3       	brcs	.-16     	; 0x106a <vfprintf+0x36e>
    107a:	da 94       	dec	r13
    107c:	f2 01       	movw	r30, r4
    107e:	ed 0d       	add	r30, r13
    1080:	f1 1d       	adc	r31, r1
    1082:	80 81       	ld	r24, Z
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	b3 01       	movw	r22, r6
    1088:	0e 94 72 08 	call	0x10e4	; 0x10e4 <fputc>
    108c:	dd 20       	and	r13, r13
    108e:	a9 f7       	brne	.-22     	; 0x107a <vfprintf+0x37e>
    1090:	06 c0       	rjmp	.+12     	; 0x109e <vfprintf+0x3a2>
    1092:	80 e2       	ldi	r24, 0x20	; 32
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	b3 01       	movw	r22, r6
    1098:	0e 94 72 08 	call	0x10e4	; 0x10e4 <fputc>
    109c:	ea 94       	dec	r14
    109e:	ee 20       	and	r14, r14
    10a0:	c1 f7       	brne	.-16     	; 0x1092 <vfprintf+0x396>
    10a2:	40 ce       	rjmp	.-896    	; 0xd24 <vfprintf+0x28>
    10a4:	f3 01       	movw	r30, r6
    10a6:	86 81       	ldd	r24, Z+6	; 0x06
    10a8:	97 81       	ldd	r25, Z+7	; 0x07
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <vfprintf+0x3b4>
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	9f ef       	ldi	r25, 0xFF	; 255
    10b0:	2d 96       	adiw	r28, 0x0d	; 13
    10b2:	e2 e1       	ldi	r30, 0x12	; 18
    10b4:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__epilogue_restores__>

000010b8 <strnlen_P>:
    10b8:	fc 01       	movw	r30, r24
    10ba:	05 90       	lpm	r0, Z+
    10bc:	61 50       	subi	r22, 0x01	; 1
    10be:	70 40       	sbci	r23, 0x00	; 0
    10c0:	01 10       	cpse	r0, r1
    10c2:	d8 f7       	brcc	.-10     	; 0x10ba <strnlen_P+0x2>
    10c4:	80 95       	com	r24
    10c6:	90 95       	com	r25
    10c8:	8e 0f       	add	r24, r30
    10ca:	9f 1f       	adc	r25, r31
    10cc:	08 95       	ret

000010ce <strnlen>:
    10ce:	fc 01       	movw	r30, r24
    10d0:	61 50       	subi	r22, 0x01	; 1
    10d2:	70 40       	sbci	r23, 0x00	; 0
    10d4:	01 90       	ld	r0, Z+
    10d6:	01 10       	cpse	r0, r1
    10d8:	d8 f7       	brcc	.-10     	; 0x10d0 <strnlen+0x2>
    10da:	80 95       	com	r24
    10dc:	90 95       	com	r25
    10de:	8e 0f       	add	r24, r30
    10e0:	9f 1f       	adc	r25, r31
    10e2:	08 95       	ret

000010e4 <fputc>:
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	8c 01       	movw	r16, r24
    10ee:	eb 01       	movw	r28, r22
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	81 ff       	sbrs	r24, 1
    10f4:	1b c0       	rjmp	.+54     	; 0x112c <fputc+0x48>
    10f6:	82 ff       	sbrs	r24, 2
    10f8:	0d c0       	rjmp	.+26     	; 0x1114 <fputc+0x30>
    10fa:	2e 81       	ldd	r18, Y+6	; 0x06
    10fc:	3f 81       	ldd	r19, Y+7	; 0x07
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	28 17       	cp	r18, r24
    1104:	39 07       	cpc	r19, r25
    1106:	64 f4       	brge	.+24     	; 0x1120 <fputc+0x3c>
    1108:	e8 81       	ld	r30, Y
    110a:	f9 81       	ldd	r31, Y+1	; 0x01
    110c:	01 93       	st	Z+, r16
    110e:	f9 83       	std	Y+1, r31	; 0x01
    1110:	e8 83       	st	Y, r30
    1112:	06 c0       	rjmp	.+12     	; 0x1120 <fputc+0x3c>
    1114:	e8 85       	ldd	r30, Y+8	; 0x08
    1116:	f9 85       	ldd	r31, Y+9	; 0x09
    1118:	80 2f       	mov	r24, r16
    111a:	09 95       	icall
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	31 f4       	brne	.+12     	; 0x112c <fputc+0x48>
    1120:	8e 81       	ldd	r24, Y+6	; 0x06
    1122:	9f 81       	ldd	r25, Y+7	; 0x07
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	9f 83       	std	Y+7, r25	; 0x07
    1128:	8e 83       	std	Y+6, r24	; 0x06
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <fputc+0x4c>
    112c:	0f ef       	ldi	r16, 0xFF	; 255
    112e:	1f ef       	ldi	r17, 0xFF	; 255
    1130:	c8 01       	movw	r24, r16
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	08 95       	ret

0000113c <__ultoa_invert>:
    113c:	fa 01       	movw	r30, r20
    113e:	aa 27       	eor	r26, r26
    1140:	28 30       	cpi	r18, 0x08	; 8
    1142:	51 f1       	breq	.+84     	; 0x1198 <__ultoa_invert+0x5c>
    1144:	20 31       	cpi	r18, 0x10	; 16
    1146:	81 f1       	breq	.+96     	; 0x11a8 <__ultoa_invert+0x6c>
    1148:	e8 94       	clt
    114a:	6f 93       	push	r22
    114c:	6e 7f       	andi	r22, 0xFE	; 254
    114e:	6e 5f       	subi	r22, 0xFE	; 254
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	af 4f       	sbci	r26, 0xFF	; 255
    1158:	b1 e0       	ldi	r27, 0x01	; 1
    115a:	3e d0       	rcall	.+124    	; 0x11d8 <__ultoa_invert+0x9c>
    115c:	b4 e0       	ldi	r27, 0x04	; 4
    115e:	3c d0       	rcall	.+120    	; 0x11d8 <__ultoa_invert+0x9c>
    1160:	67 0f       	add	r22, r23
    1162:	78 1f       	adc	r23, r24
    1164:	89 1f       	adc	r24, r25
    1166:	9a 1f       	adc	r25, r26
    1168:	a1 1d       	adc	r26, r1
    116a:	68 0f       	add	r22, r24
    116c:	79 1f       	adc	r23, r25
    116e:	8a 1f       	adc	r24, r26
    1170:	91 1d       	adc	r25, r1
    1172:	a1 1d       	adc	r26, r1
    1174:	6a 0f       	add	r22, r26
    1176:	71 1d       	adc	r23, r1
    1178:	81 1d       	adc	r24, r1
    117a:	91 1d       	adc	r25, r1
    117c:	a1 1d       	adc	r26, r1
    117e:	20 d0       	rcall	.+64     	; 0x11c0 <__ultoa_invert+0x84>
    1180:	09 f4       	brne	.+2      	; 0x1184 <__ultoa_invert+0x48>
    1182:	68 94       	set
    1184:	3f 91       	pop	r19
    1186:	2a e0       	ldi	r18, 0x0A	; 10
    1188:	26 9f       	mul	r18, r22
    118a:	11 24       	eor	r1, r1
    118c:	30 19       	sub	r19, r0
    118e:	30 5d       	subi	r19, 0xD0	; 208
    1190:	31 93       	st	Z+, r19
    1192:	de f6       	brtc	.-74     	; 0x114a <__ultoa_invert+0xe>
    1194:	cf 01       	movw	r24, r30
    1196:	08 95       	ret
    1198:	46 2f       	mov	r20, r22
    119a:	47 70       	andi	r20, 0x07	; 7
    119c:	40 5d       	subi	r20, 0xD0	; 208
    119e:	41 93       	st	Z+, r20
    11a0:	b3 e0       	ldi	r27, 0x03	; 3
    11a2:	0f d0       	rcall	.+30     	; 0x11c2 <__ultoa_invert+0x86>
    11a4:	c9 f7       	brne	.-14     	; 0x1198 <__ultoa_invert+0x5c>
    11a6:	f6 cf       	rjmp	.-20     	; 0x1194 <__ultoa_invert+0x58>
    11a8:	46 2f       	mov	r20, r22
    11aa:	4f 70       	andi	r20, 0x0F	; 15
    11ac:	40 5d       	subi	r20, 0xD0	; 208
    11ae:	4a 33       	cpi	r20, 0x3A	; 58
    11b0:	18 f0       	brcs	.+6      	; 0x11b8 <__ultoa_invert+0x7c>
    11b2:	49 5d       	subi	r20, 0xD9	; 217
    11b4:	31 fd       	sbrc	r19, 1
    11b6:	40 52       	subi	r20, 0x20	; 32
    11b8:	41 93       	st	Z+, r20
    11ba:	02 d0       	rcall	.+4      	; 0x11c0 <__ultoa_invert+0x84>
    11bc:	a9 f7       	brne	.-22     	; 0x11a8 <__ultoa_invert+0x6c>
    11be:	ea cf       	rjmp	.-44     	; 0x1194 <__ultoa_invert+0x58>
    11c0:	b4 e0       	ldi	r27, 0x04	; 4
    11c2:	a6 95       	lsr	r26
    11c4:	97 95       	ror	r25
    11c6:	87 95       	ror	r24
    11c8:	77 95       	ror	r23
    11ca:	67 95       	ror	r22
    11cc:	ba 95       	dec	r27
    11ce:	c9 f7       	brne	.-14     	; 0x11c2 <__ultoa_invert+0x86>
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	61 05       	cpc	r22, r1
    11d4:	71 05       	cpc	r23, r1
    11d6:	08 95       	ret
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    11dc:	0a 2e       	mov	r0, r26
    11de:	06 94       	lsr	r0
    11e0:	57 95       	ror	r21
    11e2:	47 95       	ror	r20
    11e4:	37 95       	ror	r19
    11e6:	27 95       	ror	r18
    11e8:	ba 95       	dec	r27
    11ea:	c9 f7       	brne	.-14     	; 0x11de <__ultoa_invert+0xa2>
    11ec:	62 0f       	add	r22, r18
    11ee:	73 1f       	adc	r23, r19
    11f0:	84 1f       	adc	r24, r20
    11f2:	95 1f       	adc	r25, r21
    11f4:	a0 1d       	adc	r26, r0
    11f6:	08 95       	ret

000011f8 <__prologue_saves__>:
    11f8:	2f 92       	push	r2
    11fa:	3f 92       	push	r3
    11fc:	4f 92       	push	r4
    11fe:	5f 92       	push	r5
    1200:	6f 92       	push	r6
    1202:	7f 92       	push	r7
    1204:	8f 92       	push	r8
    1206:	9f 92       	push	r9
    1208:	af 92       	push	r10
    120a:	bf 92       	push	r11
    120c:	cf 92       	push	r12
    120e:	df 92       	push	r13
    1210:	ef 92       	push	r14
    1212:	ff 92       	push	r15
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	ca 1b       	sub	r28, r26
    1222:	db 0b       	sbc	r29, r27
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	09 94       	ijmp

00001230 <__epilogue_restores__>:
    1230:	2a 88       	ldd	r2, Y+18	; 0x12
    1232:	39 88       	ldd	r3, Y+17	; 0x11
    1234:	48 88       	ldd	r4, Y+16	; 0x10
    1236:	5f 84       	ldd	r5, Y+15	; 0x0f
    1238:	6e 84       	ldd	r6, Y+14	; 0x0e
    123a:	7d 84       	ldd	r7, Y+13	; 0x0d
    123c:	8c 84       	ldd	r8, Y+12	; 0x0c
    123e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1240:	aa 84       	ldd	r10, Y+10	; 0x0a
    1242:	b9 84       	ldd	r11, Y+9	; 0x09
    1244:	c8 84       	ldd	r12, Y+8	; 0x08
    1246:	df 80       	ldd	r13, Y+7	; 0x07
    1248:	ee 80       	ldd	r14, Y+6	; 0x06
    124a:	fd 80       	ldd	r15, Y+5	; 0x05
    124c:	0c 81       	ldd	r16, Y+4	; 0x04
    124e:	1b 81       	ldd	r17, Y+3	; 0x03
    1250:	aa 81       	ldd	r26, Y+2	; 0x02
    1252:	b9 81       	ldd	r27, Y+1	; 0x01
    1254:	ce 0f       	add	r28, r30
    1256:	d1 1d       	adc	r29, r1
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	ed 01       	movw	r28, r26
    1264:	08 95       	ret

00001266 <_exit>:
    1266:	f8 94       	cli

00001268 <__stop_program>:
    1268:	ff cf       	rjmp	.-2      	; 0x1268 <__stop_program>
