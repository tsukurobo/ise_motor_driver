
ise_motor_driver_ip.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000a84  00000b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000412  00800104  00800104  00000b1c  2**0
                  ALLOC
  3 .stab         00000e70  00000000  00000000  00000b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000275  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00001c08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001115  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071e  00000000  00000000  00002e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa2  00000000  00000000  000035bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00004060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000540  00000000  00000000  00004310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ab  00000000  00000000  00004850  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000050fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	15 e0       	ldi	r17, 0x05	; 5
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
  9e:	0c 94 40 05 	jmp	0xa80	; 0xa80 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z16I2C_setCallbacksPFvhEPFvvE>:
static void (*I2C_recv)(uint8_t);
static void (*I2C_req)();

void I2C_setCallbacks(void (*recv)(uint8_t), void (*req)())
{
	I2C_recv = recv;
  a6:	90 93 05 01 	sts	0x0105, r25
  aa:	80 93 04 01 	sts	0x0104, r24
	I2C_req = req;
  ae:	70 93 07 01 	sts	0x0107, r23
  b2:	60 93 06 01 	sts	0x0106, r22
}
  b6:	08 95       	ret

000000b8 <_Z8I2C_inith>:

void I2C_init(uint8_t address)
{
	cli();
  b8:	f8 94       	cli
	// load address into TWI address register
	TWAR = address << 1;
  ba:	88 0f       	add	r24, r24
  bc:	80 93 ba 00 	sts	0x00BA, r24
	// set the TWCR to enable address matching and enable TWI, clear TWINT, enable TWI interrupt
	TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
  c0:	85 ec       	ldi	r24, 0xC5	; 197
  c2:	80 93 bc 00 	sts	0x00BC, r24
	sei();
  c6:	78 94       	sei
}
  c8:	08 95       	ret

000000ca <_Z13I2C_init_synch>:

void I2C_init_sync(uint8_t address)
{
	cli();
  ca:	f8 94       	cli
	// load address into TWI address register
	TWAR = address << 1;
  cc:	88 0f       	add	r24, r24
  ce:	80 93 ba 00 	sts	0x00BA, r24
	// set the TWCR to enable address matching and enable TWI, clear TWINT, enable TWI interrupt
	TWCR = (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
  d2:	84 ec       	ldi	r24, 0xC4	; 196
  d4:	80 93 bc 00 	sts	0x00BC, r24
	sei();
  d8:	78 94       	sei
}
  da:	08 95       	ret

000000dc <_Z8I2C_stopv>:

void I2C_stop(void)
{
	// clear acknowledge and enable bits
	cli();
  dc:	f8 94       	cli
	TWCR = 0;
  de:	10 92 bc 00 	sts	0x00BC, r1
	TWAR = 0;
  e2:	10 92 ba 00 	sts	0x00BA, r1
	sei();
  e6:	78 94       	sei
}
  e8:	08 95       	ret

000000ea <_Z8I2C_mainv>:

void I2C_main()
{
	//é©à∂SLA+RéÛêMÇ‹Ç≈ë“ã@
	while( !(TWCR & (1 << TWINT)));
  ea:	ec eb       	ldi	r30, 0xBC	; 188
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	ec f7       	brge	.-6      	; 0xee <_Z8I2C_mainv+0x4>
	
	switch(TW_STATUS)
  f4:	80 91 b9 00 	lds	r24, 0x00B9
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	88 7f       	andi	r24, 0xF8	; 248
  fc:	90 70       	andi	r25, 0x00	; 0
  fe:	80 38       	cpi	r24, 0x80	; 128
 100:	91 05       	cpc	r25, r1
 102:	69 f0       	breq	.+26     	; 0x11e <_Z8I2C_mainv+0x34>
 104:	81 38       	cpi	r24, 0x81	; 129
 106:	91 05       	cpc	r25, r1
 108:	1c f4       	brge	.+6      	; 0x110 <_Z8I2C_mainv+0x26>
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	29 f1       	breq	.+74     	; 0x158 <_Z8I2C_mainv+0x6e>
 10e:	2a c0       	rjmp	.+84     	; 0x164 <_Z8I2C_mainv+0x7a>
 110:	88 3a       	cpi	r24, 0xA8	; 168
 112:	91 05       	cpc	r25, r1
 114:	79 f0       	breq	.+30     	; 0x134 <_Z8I2C_mainv+0x4a>
 116:	88 3b       	cpi	r24, 0xB8	; 184
 118:	91 05       	cpc	r25, r1
 11a:	21 f5       	brne	.+72     	; 0x164 <_Z8I2C_mainv+0x7a>
 11c:	14 c0       	rjmp	.+40     	; 0x146 <_Z8I2C_mainv+0x5c>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		I2C_recv(TWDR);
 11e:	80 91 bb 00 	lds	r24, 0x00BB
 122:	e0 91 04 01 	lds	r30, 0x0104
 126:	f0 91 05 01 	lds	r31, 0x0105
 12a:	09 95       	icall
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 12c:	84 ec       	ldi	r24, 0xC4	; 196
 12e:	80 93 bc 00 	sts	0x00BC, r24
		break;
 132:	08 95       	ret
		case TW_ST_SLA_ACK:
		// master is requesting data, call the request callback
		I2C_req();
 134:	e0 91 06 01 	lds	r30, 0x0106
 138:	f0 91 07 01 	lds	r31, 0x0107
 13c:	09 95       	icall
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 13e:	84 ec       	ldi	r24, 0xC4	; 196
 140:	80 93 bc 00 	sts	0x00BC, r24
		break;
 144:	08 95       	ret
		case TW_ST_DATA_ACK:
		// master is requesting data, call the request callback
		I2C_req();
 146:	e0 91 06 01 	lds	r30, 0x0106
 14a:	f0 91 07 01 	lds	r31, 0x0107
 14e:	09 95       	icall
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 150:	84 ec       	ldi	r24, 0xC4	; 196
 152:	80 93 bc 00 	sts	0x00BC, r24
		break;
 156:	08 95       	ret
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
 158:	ec eb       	ldi	r30, 0xBC	; 188
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	10 82       	st	Z, r1
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 15e:	84 ec       	ldi	r24, 0xC4	; 196
 160:	80 83       	st	Z, r24
		break;
 162:	08 95       	ret
		default:
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 164:	84 ec       	ldi	r24, 0xC4	; 196
 166:	80 93 bc 00 	sts	0x00BC, r24
 16a:	08 95       	ret

0000016c <__vector_24>:
	}
}


ISR(TWI_vect)
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	switch(TW_STATUS)
 18e:	80 91 b9 00 	lds	r24, 0x00B9
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	88 7f       	andi	r24, 0xF8	; 248
 196:	90 70       	andi	r25, 0x00	; 0
 198:	80 38       	cpi	r24, 0x80	; 128
 19a:	91 05       	cpc	r25, r1
 19c:	69 f0       	breq	.+26     	; 0x1b8 <__vector_24+0x4c>
 19e:	81 38       	cpi	r24, 0x81	; 129
 1a0:	91 05       	cpc	r25, r1
 1a2:	1c f4       	brge	.+6      	; 0x1aa <__vector_24+0x3e>
 1a4:	00 97       	sbiw	r24, 0x00	; 0
 1a6:	29 f1       	breq	.+74     	; 0x1f2 <__vector_24+0x86>
 1a8:	2a c0       	rjmp	.+84     	; 0x1fe <__vector_24+0x92>
 1aa:	88 3a       	cpi	r24, 0xA8	; 168
 1ac:	91 05       	cpc	r25, r1
 1ae:	79 f0       	breq	.+30     	; 0x1ce <__vector_24+0x62>
 1b0:	88 3b       	cpi	r24, 0xB8	; 184
 1b2:	91 05       	cpc	r25, r1
 1b4:	21 f5       	brne	.+72     	; 0x1fe <__vector_24+0x92>
 1b6:	14 c0       	rjmp	.+40     	; 0x1e0 <__vector_24+0x74>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		I2C_recv(TWDR);
 1b8:	80 91 bb 00 	lds	r24, 0x00BB
 1bc:	e0 91 04 01 	lds	r30, 0x0104
 1c0:	f0 91 05 01 	lds	r31, 0x0105
 1c4:	09 95       	icall
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1c6:	85 ec       	ldi	r24, 0xC5	; 197
 1c8:	80 93 bc 00 	sts	0x00BC, r24
		break;
 1cc:	1b c0       	rjmp	.+54     	; 0x204 <__vector_24+0x98>
		case TW_ST_SLA_ACK:
		// master is requesting data, call the request callback
		I2C_req();
 1ce:	e0 91 06 01 	lds	r30, 0x0106
 1d2:	f0 91 07 01 	lds	r31, 0x0107
 1d6:	09 95       	icall
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1d8:	85 ec       	ldi	r24, 0xC5	; 197
 1da:	80 93 bc 00 	sts	0x00BC, r24
		break;
 1de:	12 c0       	rjmp	.+36     	; 0x204 <__vector_24+0x98>
		case TW_ST_DATA_ACK:
		// master is requesting data, call the request callback
		I2C_req();
 1e0:	e0 91 06 01 	lds	r30, 0x0106
 1e4:	f0 91 07 01 	lds	r31, 0x0107
 1e8:	09 95       	icall
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1ea:	85 ec       	ldi	r24, 0xC5	; 197
 1ec:	80 93 bc 00 	sts	0x00BC, r24
		break;
 1f0:	09 c0       	rjmp	.+18     	; 0x204 <__vector_24+0x98>
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
 1f2:	ec eb       	ldi	r30, 0xBC	; 188
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1f8:	85 ec       	ldi	r24, 0xC5	; 197
 1fa:	80 83       	st	Z, r24
		break;
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <__vector_24+0x98>
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1fe:	85 ec       	ldi	r24, 0xC5	; 197
 200:	80 93 bc 00 	sts	0x00BC, r24
		break;
	}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <_Z14i2c_request_cbPc>:
}

void i2c_request_cb(char* buf) {
	// set TI2C_buf_send.str_buf
	//strcpy(buf, "Hello World\n");
	sprintf(buf,"%ld",count);
 226:	40 91 0a 01 	lds	r20, 0x010A
 22a:	50 91 0b 01 	lds	r21, 0x010B
 22e:	60 91 0c 01 	lds	r22, 0x010C
 232:	70 91 0d 01 	lds	r23, 0x010D
 236:	2d b7       	in	r18, 0x3d	; 61
 238:	3e b7       	in	r19, 0x3e	; 62
 23a:	28 50       	subi	r18, 0x08	; 8
 23c:	30 40       	sbci	r19, 0x00	; 0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	3e bf       	out	0x3e, r19	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	2d bf       	out	0x3d, r18	; 61
 248:	ed b7       	in	r30, 0x3d	; 61
 24a:	fe b7       	in	r31, 0x3e	; 62
 24c:	31 96       	adiw	r30, 0x01	; 1
 24e:	ad b7       	in	r26, 0x3d	; 61
 250:	be b7       	in	r27, 0x3e	; 62
 252:	12 96       	adiw	r26, 0x02	; 2
 254:	9c 93       	st	X, r25
 256:	8e 93       	st	-X, r24
 258:	11 97       	sbiw	r26, 0x01	; 1
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	93 83       	std	Z+3, r25	; 0x03
 260:	82 83       	std	Z+2, r24	; 0x02
 262:	44 83       	std	Z+4, r20	; 0x04
 264:	55 83       	std	Z+5, r21	; 0x05
 266:	66 83       	std	Z+6, r22	; 0x06
 268:	77 83       	std	Z+7, r23	; 0x07
 26a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <sprintf>
 26e:	2d b7       	in	r18, 0x3d	; 61
 270:	3e b7       	in	r19, 0x3e	; 62
 272:	28 5f       	subi	r18, 0xF8	; 248
 274:	3f 4f       	sbci	r19, 0xFF	; 255
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	3e bf       	out	0x3e, r19	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	2d bf       	out	0x3d, r18	; 61
}
 280:	08 95       	ret

00000282 <_Z15i2c_received_cbPc>:

volatile long count = 0;
volatile int pw = 0;

void i2c_received_cb(char* str) {
	motor_set_speed(atoi(str));
 282:	0e 94 43 02 	call	0x486	; 0x486 <atoi>
 286:	0e 94 be 01 	call	0x37c	; 0x37c <_Z15motor_set_speedi>
}
 28a:	08 95       	ret

0000028c <__vector_4>:
	// set TI2C_buf_send.str_buf
	//strcpy(buf, "Hello World\n");
	sprintf(buf,"%ld",count);
}

ISR(PCINT1_vect, ISR_NOBLOCK){//encorder
 28c:	78 94       	sei
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	af 93       	push	r26
 2a2:	bf 93       	push	r27
	if((PINC & (1 << PINC0)) ^ ((PINC & (1 << PINC1))>> 1))--count;
 2a4:	26 b1       	in	r18, 0x06	; 6
 2a6:	86 b1       	in	r24, 0x06	; 6
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	21 70       	andi	r18, 0x01	; 1
 2ac:	30 70       	andi	r19, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	82 70       	andi	r24, 0x02	; 2
 2b2:	90 70       	andi	r25, 0x00	; 0
 2b4:	95 95       	asr	r25
 2b6:	87 95       	ror	r24
 2b8:	28 17       	cp	r18, r24
 2ba:	39 07       	cpc	r19, r25
 2bc:	a1 f0       	breq	.+40     	; 0x2e6 <__vector_4+0x5a>
 2be:	80 91 0a 01 	lds	r24, 0x010A
 2c2:	90 91 0b 01 	lds	r25, 0x010B
 2c6:	a0 91 0c 01 	lds	r26, 0x010C
 2ca:	b0 91 0d 01 	lds	r27, 0x010D
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	a1 09       	sbc	r26, r1
 2d2:	b1 09       	sbc	r27, r1
 2d4:	80 93 0a 01 	sts	0x010A, r24
 2d8:	90 93 0b 01 	sts	0x010B, r25
 2dc:	a0 93 0c 01 	sts	0x010C, r26
 2e0:	b0 93 0d 01 	sts	0x010D, r27
 2e4:	13 c0       	rjmp	.+38     	; 0x30c <__vector_4+0x80>
	else ++count;	
 2e6:	80 91 0a 01 	lds	r24, 0x010A
 2ea:	90 91 0b 01 	lds	r25, 0x010B
 2ee:	a0 91 0c 01 	lds	r26, 0x010C
 2f2:	b0 91 0d 01 	lds	r27, 0x010D
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	a1 1d       	adc	r26, r1
 2fa:	b1 1d       	adc	r27, r1
 2fc:	80 93 0a 01 	sts	0x010A, r24
 300:	90 93 0b 01 	sts	0x010B, r25
 304:	a0 93 0c 01 	sts	0x010C, r26
 308:	b0 93 0d 01 	sts	0x010D, r27
}
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <_Z5setupv>:


void setup (){
	
	//ÉsÉìïœâªäÑÇËçûÇ›ãñâ¬ÅiPCINT8~15Åj
	PCICR |= (1<<PCIE1);
 322:	e8 e6       	ldi	r30, 0x68	; 104
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	82 60       	ori	r24, 0x02	; 2
 32a:	80 83       	st	Z, r24
	//ÉsÉìïœâªäÑÇËçûÇ›ãñâ¬ÅiPCINT8Åj
	PCMSK1 |= (1<<PCINT8);
 32c:	ec e6       	ldi	r30, 0x6C	; 108
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	81 60       	ori	r24, 0x01	; 1
 334:	80 83       	st	Z, r24
	motor_init();
 336:	0e 94 b3 01 	call	0x366	; 0x366 <_Z10motor_initv>
	motor_set_speed(pw);
 33a:	80 91 08 01 	lds	r24, 0x0108
 33e:	90 91 09 01 	lds	r25, 0x0109
 342:	0e 94 be 01 	call	0x37c	; 0x37c <_Z15motor_set_speedi>
	
	DDRC = 0x00;
 346:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
 348:	18 b8       	out	0x08, r1	; 8
	
	// LED of addresses 0x10~ 0x1F 0~F -> 0~15
	PORTD |= (0b00001111 & I2C_ADDR);
 34a:	5a 9a       	sbi	0x0b, 2	; 11

	//sei();
	
	TI2C_init_sync(I2C_ADDR,i2c_received_cb, i2c_request_cb);
 34c:	84 e1       	ldi	r24, 0x14	; 20
 34e:	61 e4       	ldi	r22, 0x41	; 65
 350:	71 e0       	ldi	r23, 0x01	; 1
 352:	43 e1       	ldi	r20, 0x13	; 19
 354:	51 e0       	ldi	r21, 0x01	; 1
 356:	0e 94 11 02 	call	0x422	; 0x422 <_Z14TI2C_init_synchPFvPcES1_>
}
 35a:	08 95       	ret

0000035c <main>:


int main(void)
{
	setup();
 35c:	0e 94 91 01 	call	0x322	; 0x322 <_Z5setupv>
	
    /* Replace with your application code */
    while (1) 
    {
		I2C_main();
 360:	0e 94 75 00 	call	0xea	; 0xea <_Z8I2C_mainv>
 364:	fd cf       	rjmp	.-6      	; 0x360 <main+0x4>

00000366 <_Z10motor_initv>:
};

int motor_init(void)
{
	//setup
	DDRD |= 0b11100000;
 366:	8a b1       	in	r24, 0x0a	; 10
 368:	80 6e       	ori	r24, 0xE0	; 224
 36a:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A = 0b10100011;  //highspeedPWM
 36c:	83 ea       	ldi	r24, 0xA3	; 163
 36e:	84 bd       	out	0x24, r24	; 36
	
	TCCR0B = 0b00000010;  //1/8,Top=OVF
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	85 bd       	out	0x25, r24	; 37
}
 374:	08 95       	ret

00000376 <_Z7pwm_mapi>:

int pwm_map (int duty){
	return TMR0INI + (int)(TOP/100*duty); //duty=0~100
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
}
 37a:	08 95       	ret

0000037c <_Z15motor_set_speedi>:
	
	
	
int motor_set_speed (int power) {
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	ec 01       	movw	r28, r24
	
     	OCR0A = pwm_map(abs(power));
 382:	dd 23       	and	r29, r29
 384:	24 f4       	brge	.+8      	; 0x38e <_Z15motor_set_speedi+0x12>
 386:	88 27       	eor	r24, r24
 388:	99 27       	eor	r25, r25
 38a:	8c 1b       	sub	r24, r28
 38c:	9d 0b       	sbc	r25, r29
 38e:	0e 94 bb 01 	call	0x376	; 0x376 <_Z7pwm_mapi>
 392:	87 bd       	out	0x27, r24	; 39
	    OCR0B = pwm_map(abs(power));
 394:	88 bd       	out	0x28, r24	; 40

		if (power < 0){
 396:	dd 23       	and	r29, r29
 398:	14 f4       	brge	.+4      	; 0x39e <_Z15motor_set_speedi+0x22>
			//PORTD = 0b01100000;	  //PHASE=high
			PORTD &= 0b01111111;
 39a:	5f 98       	cbi	0x0b, 7	; 11
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <_Z15motor_set_speedi+0x2a>
		}
		
		else if(power > 0){
 39e:	1c 16       	cp	r1, r28
 3a0:	1d 06       	cpc	r1, r29
 3a2:	0c f4       	brge	.+2      	; 0x3a6 <_Z15motor_set_speedi+0x2a>
			//PORTD = 0b11100000;   //PHASE=low
			PORTD |= 0b10000000;
 3a4:	5f 9a       	sbi	0x0b, 7	; 11
		}
				
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <_Z14TI2C_requestedv>:

void TI2C_requested() //Å®master
{
	static int i = 0;
	
	if (i == 0){
 3ac:	80 91 12 05 	lds	r24, 0x0512
 3b0:	90 91 13 05 	lds	r25, 0x0513
 3b4:	00 97       	sbiw	r24, 0x00	; 0
 3b6:	39 f4       	brne	.+14     	; 0x3c6 <_Z14TI2C_requestedv+0x1a>
		// initialize
		TI2C_req_cb(TI2C_buf_send.str_buf);
 3b8:	e0 91 0e 01 	lds	r30, 0x010E
 3bc:	f0 91 0f 01 	lds	r31, 0x010F
 3c0:	82 e1       	ldi	r24, 0x12	; 18
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	09 95       	icall
	}
	// send data
	if (TI2C_buf_send.uint_buf[i] == '\0') { 
 3c6:	e0 91 12 05 	lds	r30, 0x0512
 3ca:	f0 91 13 05 	lds	r31, 0x0513
 3ce:	ee 5e       	subi	r30, 0xEE	; 238
 3d0:	fe 4f       	sbci	r31, 0xFE	; 254
 3d2:	80 81       	ld	r24, Z
 3d4:	88 23       	and	r24, r24
 3d6:	41 f4       	brne	.+16     	; 0x3e8 <_Z14TI2C_requestedv+0x3c>
void I2C_setCallbacks(void (*recv)(uint8_t), void (*req)());
void I2C_main();

inline void __attribute__((always_inline)) I2C_transmitByte(uint8_t data)
{
	TWDR = data;
 3d8:	84 e2       	ldi	r24, 0x24	; 36
 3da:	80 93 bb 00 	sts	0x00BB, r24
		I2C_transmitByte(postfix);
		i = 0;
 3de:	10 92 13 05 	sts	0x0513, r1
 3e2:	10 92 12 05 	sts	0x0512, r1
 3e6:	08 95       	ret
 3e8:	80 93 bb 00 	sts	0x00BB, r24
	} else {
		I2C_transmitByte(TI2C_buf_send.uint_buf[i]);
		i++;
 3ec:	80 91 12 05 	lds	r24, 0x0512
 3f0:	90 91 13 05 	lds	r25, 0x0513
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	90 93 13 05 	sts	0x0513, r25
 3fa:	80 93 12 05 	sts	0x0512, r24
 3fe:	08 95       	ret

00000400 <_Z9TI2C_inithPFvPcES1_>:
void (*TI2C_recv_cb)(char*);
void (*TI2C_req_cb)(char*);


void TI2C_init(uint8_t address, void (*recv)(char*), void (*req)(char*)){
	TI2C_recv_cb = recv;
 400:	70 93 11 01 	sts	0x0111, r23
 404:	60 93 10 01 	sts	0x0110, r22
	TI2C_req_cb = req;
 408:	50 93 0f 01 	sts	0x010F, r21
 40c:	40 93 0e 01 	sts	0x010E, r20
	I2C_init(address);
 410:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z8I2C_inith>
	I2C_setCallbacks(TI2C_char_received, TI2C_requested);
 414:	88 e2       	ldi	r24, 0x28	; 40
 416:	92 e0       	ldi	r25, 0x02	; 2
 418:	66 ed       	ldi	r22, 0xD6	; 214
 41a:	71 e0       	ldi	r23, 0x01	; 1
 41c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z16I2C_setCallbacksPFvhEPFvvE>
}
 420:	08 95       	ret

00000422 <_Z14TI2C_init_synchPFvPcES1_>:

void TI2C_init_sync(uint8_t address, void (*recv)(char*), void (*req)(char*)){
	TI2C_recv_cb = recv;
 422:	70 93 11 01 	sts	0x0111, r23
 426:	60 93 10 01 	sts	0x0110, r22
	TI2C_req_cb = req;
 42a:	50 93 0f 01 	sts	0x010F, r21
 42e:	40 93 0e 01 	sts	0x010E, r20
	I2C_init_sync(address);
 432:	0e 94 65 00 	call	0xca	; 0xca <_Z13I2C_init_synch>
	I2C_setCallbacks(TI2C_char_received, TI2C_requested);
 436:	88 e2       	ldi	r24, 0x28	; 40
 438:	92 e0       	ldi	r25, 0x02	; 2
 43a:	66 ed       	ldi	r22, 0xD6	; 214
 43c:	71 e0       	ldi	r23, 0x01	; 1
 43e:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z16I2C_setCallbacksPFvhEPFvvE>
}
 442:	08 95       	ret

00000444 <_Z13TI2C_receivedPc>:


void TI2C_received(char *str) //slave <-
{
	TI2C_recv_cb(str);
 444:	e0 91 10 01 	lds	r30, 0x0110
 448:	f0 91 11 01 	lds	r31, 0x0111
 44c:	09 95       	icall
}
 44e:	08 95       	ret

00000450 <_Z18TI2C_char_receivedh>:

void TI2C_char_received(uint8_t received_data) {
	//DDRC = 0b00000010;
	static int i = 0;
	// ÉfÅ[É^Ç…í«â¡
	TI2C_buf.uint_buf[i] = received_data;
 450:	20 91 14 05 	lds	r18, 0x0514
 454:	30 91 15 05 	lds	r19, 0x0515
 458:	f9 01       	movw	r30, r18
 45a:	ee 5e       	subi	r30, 0xEE	; 238
 45c:	fc 4f       	sbci	r31, 0xFC	; 252
 45e:	80 83       	st	Z, r24
	// postfixÇ™óàÇΩèÍçáÇ…ÉRÅ[ÉãÉoÉbÉNÇåƒÇÒÇ≈èâä˙âª
	if (TI2C_buf.str_buf[i] == postfix) {
 460:	84 32       	cpi	r24, 0x24	; 36
 462:	51 f4       	brne	.+20     	; 0x478 <_Z18TI2C_char_receivedh+0x28>
		TI2C_buf.str_buf[i] = '\0';
 464:	82 e1       	ldi	r24, 0x12	; 18
 466:	93 e0       	ldi	r25, 0x03	; 3
 468:	10 82       	st	Z, r1
		TI2C_received(TI2C_buf.str_buf);
 46a:	0e 94 22 02 	call	0x444	; 0x444 <_Z13TI2C_receivedPc>
		i = 0;
 46e:	10 92 15 05 	sts	0x0515, r1
 472:	10 92 14 05 	sts	0x0514, r1
 476:	08 95       	ret
	} else {
		i++;
 478:	2f 5f       	subi	r18, 0xFF	; 255
 47a:	3f 4f       	sbci	r19, 0xFF	; 255
 47c:	30 93 15 05 	sts	0x0515, r19
 480:	20 93 14 05 	sts	0x0514, r18
 484:	08 95       	ret

00000486 <atoi>:
 486:	fc 01       	movw	r30, r24
 488:	88 27       	eor	r24, r24
 48a:	99 27       	eor	r25, r25
 48c:	e8 94       	clt
 48e:	21 91       	ld	r18, Z+
 490:	20 32       	cpi	r18, 0x20	; 32
 492:	e9 f3       	breq	.-6      	; 0x48e <atoi+0x8>
 494:	29 30       	cpi	r18, 0x09	; 9
 496:	10 f0       	brcs	.+4      	; 0x49c <atoi+0x16>
 498:	2e 30       	cpi	r18, 0x0E	; 14
 49a:	c8 f3       	brcs	.-14     	; 0x48e <atoi+0x8>
 49c:	2b 32       	cpi	r18, 0x2B	; 43
 49e:	41 f0       	breq	.+16     	; 0x4b0 <atoi+0x2a>
 4a0:	2d 32       	cpi	r18, 0x2D	; 45
 4a2:	39 f4       	brne	.+14     	; 0x4b2 <atoi+0x2c>
 4a4:	68 94       	set
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <atoi+0x2a>
 4a8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__mulhi_const_10>
 4ac:	82 0f       	add	r24, r18
 4ae:	91 1d       	adc	r25, r1
 4b0:	21 91       	ld	r18, Z+
 4b2:	20 53       	subi	r18, 0x30	; 48
 4b4:	2a 30       	cpi	r18, 0x0A	; 10
 4b6:	c0 f3       	brcs	.-16     	; 0x4a8 <atoi+0x22>
 4b8:	1e f4       	brtc	.+6      	; 0x4c0 <atoi+0x3a>
 4ba:	90 95       	com	r25
 4bc:	81 95       	neg	r24
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	08 95       	ret

000004c2 <__mulhi_const_10>:
 4c2:	7a e0       	ldi	r23, 0x0A	; 10
 4c4:	97 9f       	mul	r25, r23
 4c6:	90 2d       	mov	r25, r0
 4c8:	87 9f       	mul	r24, r23
 4ca:	80 2d       	mov	r24, r0
 4cc:	91 0d       	add	r25, r1
 4ce:	11 24       	eor	r1, r1
 4d0:	08 95       	ret

000004d2 <sprintf>:
 4d2:	ae e0       	ldi	r26, 0x0E	; 14
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	ef e6       	ldi	r30, 0x6F	; 111
 4d8:	f2 e0       	ldi	r31, 0x02	; 2
 4da:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__prologue_saves__+0x1c>
 4de:	0d 89       	ldd	r16, Y+21	; 0x15
 4e0:	1e 89       	ldd	r17, Y+22	; 0x16
 4e2:	86 e0       	ldi	r24, 0x06	; 6
 4e4:	8c 83       	std	Y+4, r24	; 0x04
 4e6:	1a 83       	std	Y+2, r17	; 0x02
 4e8:	09 83       	std	Y+1, r16	; 0x01
 4ea:	8f ef       	ldi	r24, 0xFF	; 255
 4ec:	9f e7       	ldi	r25, 0x7F	; 127
 4ee:	9e 83       	std	Y+6, r25	; 0x06
 4f0:	8d 83       	std	Y+5, r24	; 0x05
 4f2:	ae 01       	movw	r20, r28
 4f4:	47 5e       	subi	r20, 0xE7	; 231
 4f6:	5f 4f       	sbci	r21, 0xFF	; 255
 4f8:	ce 01       	movw	r24, r28
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	6f 89       	ldd	r22, Y+23	; 0x17
 4fe:	78 8d       	ldd	r23, Y+24	; 0x18
 500:	0e 94 8b 02 	call	0x516	; 0x516 <vfprintf>
 504:	ef 81       	ldd	r30, Y+7	; 0x07
 506:	f8 85       	ldd	r31, Y+8	; 0x08
 508:	e0 0f       	add	r30, r16
 50a:	f1 1f       	adc	r31, r17
 50c:	10 82       	st	Z, r1
 50e:	2e 96       	adiw	r28, 0x0e	; 14
 510:	e4 e0       	ldi	r30, 0x04	; 4
 512:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__epilogue_restores__+0x1c>

00000516 <vfprintf>:
 516:	ad e0       	ldi	r26, 0x0D	; 13
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	e1 e9       	ldi	r30, 0x91	; 145
 51c:	f2 e0       	ldi	r31, 0x02	; 2
 51e:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__prologue_saves__>
 522:	3c 01       	movw	r6, r24
 524:	7d 87       	std	Y+13, r23	; 0x0d
 526:	6c 87       	std	Y+12, r22	; 0x0c
 528:	5a 01       	movw	r10, r20
 52a:	fc 01       	movw	r30, r24
 52c:	17 82       	std	Z+7, r1	; 0x07
 52e:	16 82       	std	Z+6, r1	; 0x06
 530:	83 81       	ldd	r24, Z+3	; 0x03
 532:	81 ff       	sbrs	r24, 1
 534:	c8 c1       	rjmp	.+912    	; 0x8c6 <vfprintf+0x3b0>
 536:	2e 01       	movw	r4, r28
 538:	08 94       	sec
 53a:	41 1c       	adc	r4, r1
 53c:	51 1c       	adc	r5, r1
 53e:	f3 01       	movw	r30, r6
 540:	93 81       	ldd	r25, Z+3	; 0x03
 542:	ec 85       	ldd	r30, Y+12	; 0x0c
 544:	fd 85       	ldd	r31, Y+13	; 0x0d
 546:	93 fd       	sbrc	r25, 3
 548:	85 91       	lpm	r24, Z+
 54a:	93 ff       	sbrs	r25, 3
 54c:	81 91       	ld	r24, Z+
 54e:	fd 87       	std	Y+13, r31	; 0x0d
 550:	ec 87       	std	Y+12, r30	; 0x0c
 552:	88 23       	and	r24, r24
 554:	09 f4       	brne	.+2      	; 0x558 <vfprintf+0x42>
 556:	b3 c1       	rjmp	.+870    	; 0x8be <vfprintf+0x3a8>
 558:	85 32       	cpi	r24, 0x25	; 37
 55a:	41 f4       	brne	.+16     	; 0x56c <vfprintf+0x56>
 55c:	93 fd       	sbrc	r25, 3
 55e:	85 91       	lpm	r24, Z+
 560:	93 ff       	sbrs	r25, 3
 562:	81 91       	ld	r24, Z+
 564:	fd 87       	std	Y+13, r31	; 0x0d
 566:	ec 87       	std	Y+12, r30	; 0x0c
 568:	85 32       	cpi	r24, 0x25	; 37
 56a:	29 f4       	brne	.+10     	; 0x576 <vfprintf+0x60>
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	b3 01       	movw	r22, r6
 570:	0e 94 7f 04 	call	0x8fe	; 0x8fe <fputc>
 574:	e4 cf       	rjmp	.-56     	; 0x53e <vfprintf+0x28>
 576:	ff 24       	eor	r15, r15
 578:	ee 24       	eor	r14, r14
 57a:	10 e0       	ldi	r17, 0x00	; 0
 57c:	10 32       	cpi	r17, 0x20	; 32
 57e:	b0 f4       	brcc	.+44     	; 0x5ac <vfprintf+0x96>
 580:	8b 32       	cpi	r24, 0x2B	; 43
 582:	69 f0       	breq	.+26     	; 0x59e <vfprintf+0x88>
 584:	8c 32       	cpi	r24, 0x2C	; 44
 586:	28 f4       	brcc	.+10     	; 0x592 <vfprintf+0x7c>
 588:	80 32       	cpi	r24, 0x20	; 32
 58a:	51 f0       	breq	.+20     	; 0x5a0 <vfprintf+0x8a>
 58c:	83 32       	cpi	r24, 0x23	; 35
 58e:	71 f4       	brne	.+28     	; 0x5ac <vfprintf+0x96>
 590:	0b c0       	rjmp	.+22     	; 0x5a8 <vfprintf+0x92>
 592:	8d 32       	cpi	r24, 0x2D	; 45
 594:	39 f0       	breq	.+14     	; 0x5a4 <vfprintf+0x8e>
 596:	80 33       	cpi	r24, 0x30	; 48
 598:	49 f4       	brne	.+18     	; 0x5ac <vfprintf+0x96>
 59a:	11 60       	ori	r17, 0x01	; 1
 59c:	2c c0       	rjmp	.+88     	; 0x5f6 <vfprintf+0xe0>
 59e:	12 60       	ori	r17, 0x02	; 2
 5a0:	14 60       	ori	r17, 0x04	; 4
 5a2:	29 c0       	rjmp	.+82     	; 0x5f6 <vfprintf+0xe0>
 5a4:	18 60       	ori	r17, 0x08	; 8
 5a6:	27 c0       	rjmp	.+78     	; 0x5f6 <vfprintf+0xe0>
 5a8:	10 61       	ori	r17, 0x10	; 16
 5aa:	25 c0       	rjmp	.+74     	; 0x5f6 <vfprintf+0xe0>
 5ac:	17 fd       	sbrc	r17, 7
 5ae:	2e c0       	rjmp	.+92     	; 0x60c <vfprintf+0xf6>
 5b0:	28 2f       	mov	r18, r24
 5b2:	20 53       	subi	r18, 0x30	; 48
 5b4:	2a 30       	cpi	r18, 0x0A	; 10
 5b6:	98 f4       	brcc	.+38     	; 0x5de <vfprintf+0xc8>
 5b8:	16 ff       	sbrs	r17, 6
 5ba:	08 c0       	rjmp	.+16     	; 0x5cc <vfprintf+0xb6>
 5bc:	8f 2d       	mov	r24, r15
 5be:	88 0f       	add	r24, r24
 5c0:	f8 2e       	mov	r15, r24
 5c2:	ff 0c       	add	r15, r15
 5c4:	ff 0c       	add	r15, r15
 5c6:	f8 0e       	add	r15, r24
 5c8:	f2 0e       	add	r15, r18
 5ca:	15 c0       	rjmp	.+42     	; 0x5f6 <vfprintf+0xe0>
 5cc:	8e 2d       	mov	r24, r14
 5ce:	88 0f       	add	r24, r24
 5d0:	e8 2e       	mov	r14, r24
 5d2:	ee 0c       	add	r14, r14
 5d4:	ee 0c       	add	r14, r14
 5d6:	e8 0e       	add	r14, r24
 5d8:	e2 0e       	add	r14, r18
 5da:	10 62       	ori	r17, 0x20	; 32
 5dc:	0c c0       	rjmp	.+24     	; 0x5f6 <vfprintf+0xe0>
 5de:	8e 32       	cpi	r24, 0x2E	; 46
 5e0:	21 f4       	brne	.+8      	; 0x5ea <vfprintf+0xd4>
 5e2:	16 fd       	sbrc	r17, 6
 5e4:	6c c1       	rjmp	.+728    	; 0x8be <vfprintf+0x3a8>
 5e6:	10 64       	ori	r17, 0x40	; 64
 5e8:	06 c0       	rjmp	.+12     	; 0x5f6 <vfprintf+0xe0>
 5ea:	8c 36       	cpi	r24, 0x6C	; 108
 5ec:	11 f4       	brne	.+4      	; 0x5f2 <vfprintf+0xdc>
 5ee:	10 68       	ori	r17, 0x80	; 128
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <vfprintf+0xe0>
 5f2:	88 36       	cpi	r24, 0x68	; 104
 5f4:	59 f4       	brne	.+22     	; 0x60c <vfprintf+0xf6>
 5f6:	ec 85       	ldd	r30, Y+12	; 0x0c
 5f8:	fd 85       	ldd	r31, Y+13	; 0x0d
 5fa:	93 fd       	sbrc	r25, 3
 5fc:	85 91       	lpm	r24, Z+
 5fe:	93 ff       	sbrs	r25, 3
 600:	81 91       	ld	r24, Z+
 602:	fd 87       	std	Y+13, r31	; 0x0d
 604:	ec 87       	std	Y+12, r30	; 0x0c
 606:	88 23       	and	r24, r24
 608:	09 f0       	breq	.+2      	; 0x60c <vfprintf+0xf6>
 60a:	b8 cf       	rjmp	.-144    	; 0x57c <vfprintf+0x66>
 60c:	98 2f       	mov	r25, r24
 60e:	95 54       	subi	r25, 0x45	; 69
 610:	93 30       	cpi	r25, 0x03	; 3
 612:	18 f0       	brcs	.+6      	; 0x61a <vfprintf+0x104>
 614:	90 52       	subi	r25, 0x20	; 32
 616:	93 30       	cpi	r25, 0x03	; 3
 618:	38 f4       	brcc	.+14     	; 0x628 <vfprintf+0x112>
 61a:	24 e0       	ldi	r18, 0x04	; 4
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	a2 0e       	add	r10, r18
 620:	b3 1e       	adc	r11, r19
 622:	3f e3       	ldi	r19, 0x3F	; 63
 624:	39 83       	std	Y+1, r19	; 0x01
 626:	0f c0       	rjmp	.+30     	; 0x646 <vfprintf+0x130>
 628:	83 36       	cpi	r24, 0x63	; 99
 62a:	31 f0       	breq	.+12     	; 0x638 <vfprintf+0x122>
 62c:	83 37       	cpi	r24, 0x73	; 115
 62e:	81 f0       	breq	.+32     	; 0x650 <vfprintf+0x13a>
 630:	83 35       	cpi	r24, 0x53	; 83
 632:	09 f0       	breq	.+2      	; 0x636 <vfprintf+0x120>
 634:	5a c0       	rjmp	.+180    	; 0x6ea <vfprintf+0x1d4>
 636:	22 c0       	rjmp	.+68     	; 0x67c <vfprintf+0x166>
 638:	f5 01       	movw	r30, r10
 63a:	80 81       	ld	r24, Z
 63c:	89 83       	std	Y+1, r24	; 0x01
 63e:	22 e0       	ldi	r18, 0x02	; 2
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	a2 0e       	add	r10, r18
 644:	b3 1e       	adc	r11, r19
 646:	21 e0       	ldi	r18, 0x01	; 1
 648:	c2 2e       	mov	r12, r18
 64a:	d1 2c       	mov	r13, r1
 64c:	42 01       	movw	r8, r4
 64e:	14 c0       	rjmp	.+40     	; 0x678 <vfprintf+0x162>
 650:	92 e0       	ldi	r25, 0x02	; 2
 652:	29 2e       	mov	r2, r25
 654:	31 2c       	mov	r3, r1
 656:	2a 0c       	add	r2, r10
 658:	3b 1c       	adc	r3, r11
 65a:	f5 01       	movw	r30, r10
 65c:	80 80       	ld	r8, Z
 65e:	91 80       	ldd	r9, Z+1	; 0x01
 660:	16 ff       	sbrs	r17, 6
 662:	03 c0       	rjmp	.+6      	; 0x66a <vfprintf+0x154>
 664:	6f 2d       	mov	r22, r15
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	02 c0       	rjmp	.+4      	; 0x66e <vfprintf+0x158>
 66a:	6f ef       	ldi	r22, 0xFF	; 255
 66c:	7f ef       	ldi	r23, 0xFF	; 255
 66e:	c4 01       	movw	r24, r8
 670:	0e 94 74 04 	call	0x8e8	; 0x8e8 <strnlen>
 674:	6c 01       	movw	r12, r24
 676:	51 01       	movw	r10, r2
 678:	1f 77       	andi	r17, 0x7F	; 127
 67a:	15 c0       	rjmp	.+42     	; 0x6a6 <vfprintf+0x190>
 67c:	82 e0       	ldi	r24, 0x02	; 2
 67e:	28 2e       	mov	r2, r24
 680:	31 2c       	mov	r3, r1
 682:	2a 0c       	add	r2, r10
 684:	3b 1c       	adc	r3, r11
 686:	f5 01       	movw	r30, r10
 688:	80 80       	ld	r8, Z
 68a:	91 80       	ldd	r9, Z+1	; 0x01
 68c:	16 ff       	sbrs	r17, 6
 68e:	03 c0       	rjmp	.+6      	; 0x696 <vfprintf+0x180>
 690:	6f 2d       	mov	r22, r15
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <vfprintf+0x184>
 696:	6f ef       	ldi	r22, 0xFF	; 255
 698:	7f ef       	ldi	r23, 0xFF	; 255
 69a:	c4 01       	movw	r24, r8
 69c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <strnlen_P>
 6a0:	6c 01       	movw	r12, r24
 6a2:	10 68       	ori	r17, 0x80	; 128
 6a4:	51 01       	movw	r10, r2
 6a6:	13 fd       	sbrc	r17, 3
 6a8:	1c c0       	rjmp	.+56     	; 0x6e2 <vfprintf+0x1cc>
 6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <vfprintf+0x1a2>
 6ac:	80 e2       	ldi	r24, 0x20	; 32
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	b3 01       	movw	r22, r6
 6b2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <fputc>
 6b6:	ea 94       	dec	r14
 6b8:	8e 2d       	mov	r24, r14
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	c8 16       	cp	r12, r24
 6be:	d9 06       	cpc	r13, r25
 6c0:	a8 f3       	brcs	.-22     	; 0x6ac <vfprintf+0x196>
 6c2:	0f c0       	rjmp	.+30     	; 0x6e2 <vfprintf+0x1cc>
 6c4:	f4 01       	movw	r30, r8
 6c6:	17 fd       	sbrc	r17, 7
 6c8:	85 91       	lpm	r24, Z+
 6ca:	17 ff       	sbrs	r17, 7
 6cc:	81 91       	ld	r24, Z+
 6ce:	4f 01       	movw	r8, r30
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	b3 01       	movw	r22, r6
 6d4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <fputc>
 6d8:	e1 10       	cpse	r14, r1
 6da:	ea 94       	dec	r14
 6dc:	08 94       	sec
 6de:	c1 08       	sbc	r12, r1
 6e0:	d1 08       	sbc	r13, r1
 6e2:	c1 14       	cp	r12, r1
 6e4:	d1 04       	cpc	r13, r1
 6e6:	71 f7       	brne	.-36     	; 0x6c4 <vfprintf+0x1ae>
 6e8:	e7 c0       	rjmp	.+462    	; 0x8b8 <vfprintf+0x3a2>
 6ea:	84 36       	cpi	r24, 0x64	; 100
 6ec:	11 f0       	breq	.+4      	; 0x6f2 <vfprintf+0x1dc>
 6ee:	89 36       	cpi	r24, 0x69	; 105
 6f0:	51 f5       	brne	.+84     	; 0x746 <vfprintf+0x230>
 6f2:	f5 01       	movw	r30, r10
 6f4:	17 ff       	sbrs	r17, 7
 6f6:	07 c0       	rjmp	.+14     	; 0x706 <vfprintf+0x1f0>
 6f8:	80 81       	ld	r24, Z
 6fa:	91 81       	ldd	r25, Z+1	; 0x01
 6fc:	a2 81       	ldd	r26, Z+2	; 0x02
 6fe:	b3 81       	ldd	r27, Z+3	; 0x03
 700:	24 e0       	ldi	r18, 0x04	; 4
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	08 c0       	rjmp	.+16     	; 0x716 <vfprintf+0x200>
 706:	80 81       	ld	r24, Z
 708:	91 81       	ldd	r25, Z+1	; 0x01
 70a:	aa 27       	eor	r26, r26
 70c:	97 fd       	sbrc	r25, 7
 70e:	a0 95       	com	r26
 710:	ba 2f       	mov	r27, r26
 712:	22 e0       	ldi	r18, 0x02	; 2
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	a2 0e       	add	r10, r18
 718:	b3 1e       	adc	r11, r19
 71a:	01 2f       	mov	r16, r17
 71c:	0f 76       	andi	r16, 0x6F	; 111
 71e:	b7 ff       	sbrs	r27, 7
 720:	08 c0       	rjmp	.+16     	; 0x732 <vfprintf+0x21c>
 722:	b0 95       	com	r27
 724:	a0 95       	com	r26
 726:	90 95       	com	r25
 728:	81 95       	neg	r24
 72a:	9f 4f       	sbci	r25, 0xFF	; 255
 72c:	af 4f       	sbci	r26, 0xFF	; 255
 72e:	bf 4f       	sbci	r27, 0xFF	; 255
 730:	00 68       	ori	r16, 0x80	; 128
 732:	bc 01       	movw	r22, r24
 734:	cd 01       	movw	r24, r26
 736:	a2 01       	movw	r20, r4
 738:	2a e0       	ldi	r18, 0x0A	; 10
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	0e 94 ab 04 	call	0x956	; 0x956 <__ultoa_invert>
 740:	d8 2e       	mov	r13, r24
 742:	d4 18       	sub	r13, r4
 744:	3f c0       	rjmp	.+126    	; 0x7c4 <vfprintf+0x2ae>
 746:	85 37       	cpi	r24, 0x75	; 117
 748:	21 f4       	brne	.+8      	; 0x752 <vfprintf+0x23c>
 74a:	1f 7e       	andi	r17, 0xEF	; 239
 74c:	2a e0       	ldi	r18, 0x0A	; 10
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	20 c0       	rjmp	.+64     	; 0x792 <vfprintf+0x27c>
 752:	19 7f       	andi	r17, 0xF9	; 249
 754:	8f 36       	cpi	r24, 0x6F	; 111
 756:	a9 f0       	breq	.+42     	; 0x782 <vfprintf+0x26c>
 758:	80 37       	cpi	r24, 0x70	; 112
 75a:	20 f4       	brcc	.+8      	; 0x764 <vfprintf+0x24e>
 75c:	88 35       	cpi	r24, 0x58	; 88
 75e:	09 f0       	breq	.+2      	; 0x762 <vfprintf+0x24c>
 760:	ae c0       	rjmp	.+348    	; 0x8be <vfprintf+0x3a8>
 762:	0b c0       	rjmp	.+22     	; 0x77a <vfprintf+0x264>
 764:	80 37       	cpi	r24, 0x70	; 112
 766:	21 f0       	breq	.+8      	; 0x770 <vfprintf+0x25a>
 768:	88 37       	cpi	r24, 0x78	; 120
 76a:	09 f0       	breq	.+2      	; 0x76e <vfprintf+0x258>
 76c:	a8 c0       	rjmp	.+336    	; 0x8be <vfprintf+0x3a8>
 76e:	01 c0       	rjmp	.+2      	; 0x772 <vfprintf+0x25c>
 770:	10 61       	ori	r17, 0x10	; 16
 772:	14 ff       	sbrs	r17, 4
 774:	09 c0       	rjmp	.+18     	; 0x788 <vfprintf+0x272>
 776:	14 60       	ori	r17, 0x04	; 4
 778:	07 c0       	rjmp	.+14     	; 0x788 <vfprintf+0x272>
 77a:	14 ff       	sbrs	r17, 4
 77c:	08 c0       	rjmp	.+16     	; 0x78e <vfprintf+0x278>
 77e:	16 60       	ori	r17, 0x06	; 6
 780:	06 c0       	rjmp	.+12     	; 0x78e <vfprintf+0x278>
 782:	28 e0       	ldi	r18, 0x08	; 8
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	05 c0       	rjmp	.+10     	; 0x792 <vfprintf+0x27c>
 788:	20 e1       	ldi	r18, 0x10	; 16
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	02 c0       	rjmp	.+4      	; 0x792 <vfprintf+0x27c>
 78e:	20 e1       	ldi	r18, 0x10	; 16
 790:	32 e0       	ldi	r19, 0x02	; 2
 792:	f5 01       	movw	r30, r10
 794:	17 ff       	sbrs	r17, 7
 796:	07 c0       	rjmp	.+14     	; 0x7a6 <vfprintf+0x290>
 798:	60 81       	ld	r22, Z
 79a:	71 81       	ldd	r23, Z+1	; 0x01
 79c:	82 81       	ldd	r24, Z+2	; 0x02
 79e:	93 81       	ldd	r25, Z+3	; 0x03
 7a0:	44 e0       	ldi	r20, 0x04	; 4
 7a2:	50 e0       	ldi	r21, 0x00	; 0
 7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <vfprintf+0x29c>
 7a6:	60 81       	ld	r22, Z
 7a8:	71 81       	ldd	r23, Z+1	; 0x01
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	42 e0       	ldi	r20, 0x02	; 2
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	a4 0e       	add	r10, r20
 7b4:	b5 1e       	adc	r11, r21
 7b6:	a2 01       	movw	r20, r4
 7b8:	0e 94 ab 04 	call	0x956	; 0x956 <__ultoa_invert>
 7bc:	d8 2e       	mov	r13, r24
 7be:	d4 18       	sub	r13, r4
 7c0:	01 2f       	mov	r16, r17
 7c2:	0f 77       	andi	r16, 0x7F	; 127
 7c4:	06 ff       	sbrs	r16, 6
 7c6:	09 c0       	rjmp	.+18     	; 0x7da <vfprintf+0x2c4>
 7c8:	0e 7f       	andi	r16, 0xFE	; 254
 7ca:	df 14       	cp	r13, r15
 7cc:	30 f4       	brcc	.+12     	; 0x7da <vfprintf+0x2c4>
 7ce:	04 ff       	sbrs	r16, 4
 7d0:	06 c0       	rjmp	.+12     	; 0x7de <vfprintf+0x2c8>
 7d2:	02 fd       	sbrc	r16, 2
 7d4:	04 c0       	rjmp	.+8      	; 0x7de <vfprintf+0x2c8>
 7d6:	0f 7e       	andi	r16, 0xEF	; 239
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <vfprintf+0x2c8>
 7da:	1d 2d       	mov	r17, r13
 7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <vfprintf+0x2ca>
 7de:	1f 2d       	mov	r17, r15
 7e0:	80 2f       	mov	r24, r16
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	04 ff       	sbrs	r16, 4
 7e6:	0c c0       	rjmp	.+24     	; 0x800 <vfprintf+0x2ea>
 7e8:	fe 01       	movw	r30, r28
 7ea:	ed 0d       	add	r30, r13
 7ec:	f1 1d       	adc	r31, r1
 7ee:	20 81       	ld	r18, Z
 7f0:	20 33       	cpi	r18, 0x30	; 48
 7f2:	11 f4       	brne	.+4      	; 0x7f8 <vfprintf+0x2e2>
 7f4:	09 7e       	andi	r16, 0xE9	; 233
 7f6:	09 c0       	rjmp	.+18     	; 0x80a <vfprintf+0x2f4>
 7f8:	02 ff       	sbrs	r16, 2
 7fa:	06 c0       	rjmp	.+12     	; 0x808 <vfprintf+0x2f2>
 7fc:	1e 5f       	subi	r17, 0xFE	; 254
 7fe:	05 c0       	rjmp	.+10     	; 0x80a <vfprintf+0x2f4>
 800:	86 78       	andi	r24, 0x86	; 134
 802:	90 70       	andi	r25, 0x00	; 0
 804:	00 97       	sbiw	r24, 0x00	; 0
 806:	09 f0       	breq	.+2      	; 0x80a <vfprintf+0x2f4>
 808:	1f 5f       	subi	r17, 0xFF	; 255
 80a:	80 2e       	mov	r8, r16
 80c:	99 24       	eor	r9, r9
 80e:	03 fd       	sbrc	r16, 3
 810:	12 c0       	rjmp	.+36     	; 0x836 <vfprintf+0x320>
 812:	00 ff       	sbrs	r16, 0
 814:	0d c0       	rjmp	.+26     	; 0x830 <vfprintf+0x31a>
 816:	fd 2c       	mov	r15, r13
 818:	1e 15       	cp	r17, r14
 81a:	50 f4       	brcc	.+20     	; 0x830 <vfprintf+0x31a>
 81c:	fe 0c       	add	r15, r14
 81e:	f1 1a       	sub	r15, r17
 820:	1e 2d       	mov	r17, r14
 822:	06 c0       	rjmp	.+12     	; 0x830 <vfprintf+0x31a>
 824:	80 e2       	ldi	r24, 0x20	; 32
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	b3 01       	movw	r22, r6
 82a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <fputc>
 82e:	1f 5f       	subi	r17, 0xFF	; 255
 830:	1e 15       	cp	r17, r14
 832:	c0 f3       	brcs	.-16     	; 0x824 <vfprintf+0x30e>
 834:	04 c0       	rjmp	.+8      	; 0x83e <vfprintf+0x328>
 836:	1e 15       	cp	r17, r14
 838:	10 f4       	brcc	.+4      	; 0x83e <vfprintf+0x328>
 83a:	e1 1a       	sub	r14, r17
 83c:	01 c0       	rjmp	.+2      	; 0x840 <vfprintf+0x32a>
 83e:	ee 24       	eor	r14, r14
 840:	84 fe       	sbrs	r8, 4
 842:	0f c0       	rjmp	.+30     	; 0x862 <vfprintf+0x34c>
 844:	80 e3       	ldi	r24, 0x30	; 48
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	b3 01       	movw	r22, r6
 84a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <fputc>
 84e:	82 fe       	sbrs	r8, 2
 850:	1f c0       	rjmp	.+62     	; 0x890 <vfprintf+0x37a>
 852:	81 fe       	sbrs	r8, 1
 854:	03 c0       	rjmp	.+6      	; 0x85c <vfprintf+0x346>
 856:	88 e5       	ldi	r24, 0x58	; 88
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	10 c0       	rjmp	.+32     	; 0x87c <vfprintf+0x366>
 85c:	88 e7       	ldi	r24, 0x78	; 120
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0d c0       	rjmp	.+26     	; 0x87c <vfprintf+0x366>
 862:	c4 01       	movw	r24, r8
 864:	86 78       	andi	r24, 0x86	; 134
 866:	90 70       	andi	r25, 0x00	; 0
 868:	00 97       	sbiw	r24, 0x00	; 0
 86a:	91 f0       	breq	.+36     	; 0x890 <vfprintf+0x37a>
 86c:	81 fc       	sbrc	r8, 1
 86e:	02 c0       	rjmp	.+4      	; 0x874 <vfprintf+0x35e>
 870:	80 e2       	ldi	r24, 0x20	; 32
 872:	01 c0       	rjmp	.+2      	; 0x876 <vfprintf+0x360>
 874:	8b e2       	ldi	r24, 0x2B	; 43
 876:	07 fd       	sbrc	r16, 7
 878:	8d e2       	ldi	r24, 0x2D	; 45
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	b3 01       	movw	r22, r6
 87e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <fputc>
 882:	06 c0       	rjmp	.+12     	; 0x890 <vfprintf+0x37a>
 884:	80 e3       	ldi	r24, 0x30	; 48
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	b3 01       	movw	r22, r6
 88a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <fputc>
 88e:	fa 94       	dec	r15
 890:	df 14       	cp	r13, r15
 892:	c0 f3       	brcs	.-16     	; 0x884 <vfprintf+0x36e>
 894:	da 94       	dec	r13
 896:	f2 01       	movw	r30, r4
 898:	ed 0d       	add	r30, r13
 89a:	f1 1d       	adc	r31, r1
 89c:	80 81       	ld	r24, Z
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	b3 01       	movw	r22, r6
 8a2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <fputc>
 8a6:	dd 20       	and	r13, r13
 8a8:	a9 f7       	brne	.-22     	; 0x894 <vfprintf+0x37e>
 8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <vfprintf+0x3a2>
 8ac:	80 e2       	ldi	r24, 0x20	; 32
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	b3 01       	movw	r22, r6
 8b2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <fputc>
 8b6:	ea 94       	dec	r14
 8b8:	ee 20       	and	r14, r14
 8ba:	c1 f7       	brne	.-16     	; 0x8ac <vfprintf+0x396>
 8bc:	40 ce       	rjmp	.-896    	; 0x53e <vfprintf+0x28>
 8be:	f3 01       	movw	r30, r6
 8c0:	86 81       	ldd	r24, Z+6	; 0x06
 8c2:	97 81       	ldd	r25, Z+7	; 0x07
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <vfprintf+0x3b4>
 8c6:	8f ef       	ldi	r24, 0xFF	; 255
 8c8:	9f ef       	ldi	r25, 0xFF	; 255
 8ca:	2d 96       	adiw	r28, 0x0d	; 13
 8cc:	e2 e1       	ldi	r30, 0x12	; 18
 8ce:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__epilogue_restores__>

000008d2 <strnlen_P>:
 8d2:	fc 01       	movw	r30, r24
 8d4:	05 90       	lpm	r0, Z+
 8d6:	61 50       	subi	r22, 0x01	; 1
 8d8:	70 40       	sbci	r23, 0x00	; 0
 8da:	01 10       	cpse	r0, r1
 8dc:	d8 f7       	brcc	.-10     	; 0x8d4 <strnlen_P+0x2>
 8de:	80 95       	com	r24
 8e0:	90 95       	com	r25
 8e2:	8e 0f       	add	r24, r30
 8e4:	9f 1f       	adc	r25, r31
 8e6:	08 95       	ret

000008e8 <strnlen>:
 8e8:	fc 01       	movw	r30, r24
 8ea:	61 50       	subi	r22, 0x01	; 1
 8ec:	70 40       	sbci	r23, 0x00	; 0
 8ee:	01 90       	ld	r0, Z+
 8f0:	01 10       	cpse	r0, r1
 8f2:	d8 f7       	brcc	.-10     	; 0x8ea <strnlen+0x2>
 8f4:	80 95       	com	r24
 8f6:	90 95       	com	r25
 8f8:	8e 0f       	add	r24, r30
 8fa:	9f 1f       	adc	r25, r31
 8fc:	08 95       	ret

000008fe <fputc>:
 8fe:	0f 93       	push	r16
 900:	1f 93       	push	r17
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	8c 01       	movw	r16, r24
 908:	eb 01       	movw	r28, r22
 90a:	8b 81       	ldd	r24, Y+3	; 0x03
 90c:	81 ff       	sbrs	r24, 1
 90e:	1b c0       	rjmp	.+54     	; 0x946 <__stack+0x47>
 910:	82 ff       	sbrs	r24, 2
 912:	0d c0       	rjmp	.+26     	; 0x92e <__stack+0x2f>
 914:	2e 81       	ldd	r18, Y+6	; 0x06
 916:	3f 81       	ldd	r19, Y+7	; 0x07
 918:	8c 81       	ldd	r24, Y+4	; 0x04
 91a:	9d 81       	ldd	r25, Y+5	; 0x05
 91c:	28 17       	cp	r18, r24
 91e:	39 07       	cpc	r19, r25
 920:	64 f4       	brge	.+24     	; 0x93a <__stack+0x3b>
 922:	e8 81       	ld	r30, Y
 924:	f9 81       	ldd	r31, Y+1	; 0x01
 926:	01 93       	st	Z+, r16
 928:	f9 83       	std	Y+1, r31	; 0x01
 92a:	e8 83       	st	Y, r30
 92c:	06 c0       	rjmp	.+12     	; 0x93a <__stack+0x3b>
 92e:	e8 85       	ldd	r30, Y+8	; 0x08
 930:	f9 85       	ldd	r31, Y+9	; 0x09
 932:	80 2f       	mov	r24, r16
 934:	09 95       	icall
 936:	00 97       	sbiw	r24, 0x00	; 0
 938:	31 f4       	brne	.+12     	; 0x946 <__stack+0x47>
 93a:	8e 81       	ldd	r24, Y+6	; 0x06
 93c:	9f 81       	ldd	r25, Y+7	; 0x07
 93e:	01 96       	adiw	r24, 0x01	; 1
 940:	9f 83       	std	Y+7, r25	; 0x07
 942:	8e 83       	std	Y+6, r24	; 0x06
 944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0x4b>
 946:	0f ef       	ldi	r16, 0xFF	; 255
 948:	1f ef       	ldi	r17, 0xFF	; 255
 94a:	c8 01       	movw	r24, r16
 94c:	df 91       	pop	r29
 94e:	cf 91       	pop	r28
 950:	1f 91       	pop	r17
 952:	0f 91       	pop	r16
 954:	08 95       	ret

00000956 <__ultoa_invert>:
 956:	fa 01       	movw	r30, r20
 958:	aa 27       	eor	r26, r26
 95a:	28 30       	cpi	r18, 0x08	; 8
 95c:	51 f1       	breq	.+84     	; 0x9b2 <__ultoa_invert+0x5c>
 95e:	20 31       	cpi	r18, 0x10	; 16
 960:	81 f1       	breq	.+96     	; 0x9c2 <__ultoa_invert+0x6c>
 962:	e8 94       	clt
 964:	6f 93       	push	r22
 966:	6e 7f       	andi	r22, 0xFE	; 254
 968:	6e 5f       	subi	r22, 0xFE	; 254
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	8f 4f       	sbci	r24, 0xFF	; 255
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	af 4f       	sbci	r26, 0xFF	; 255
 972:	b1 e0       	ldi	r27, 0x01	; 1
 974:	3e d0       	rcall	.+124    	; 0x9f2 <__ultoa_invert+0x9c>
 976:	b4 e0       	ldi	r27, 0x04	; 4
 978:	3c d0       	rcall	.+120    	; 0x9f2 <__ultoa_invert+0x9c>
 97a:	67 0f       	add	r22, r23
 97c:	78 1f       	adc	r23, r24
 97e:	89 1f       	adc	r24, r25
 980:	9a 1f       	adc	r25, r26
 982:	a1 1d       	adc	r26, r1
 984:	68 0f       	add	r22, r24
 986:	79 1f       	adc	r23, r25
 988:	8a 1f       	adc	r24, r26
 98a:	91 1d       	adc	r25, r1
 98c:	a1 1d       	adc	r26, r1
 98e:	6a 0f       	add	r22, r26
 990:	71 1d       	adc	r23, r1
 992:	81 1d       	adc	r24, r1
 994:	91 1d       	adc	r25, r1
 996:	a1 1d       	adc	r26, r1
 998:	20 d0       	rcall	.+64     	; 0x9da <__ultoa_invert+0x84>
 99a:	09 f4       	brne	.+2      	; 0x99e <__ultoa_invert+0x48>
 99c:	68 94       	set
 99e:	3f 91       	pop	r19
 9a0:	2a e0       	ldi	r18, 0x0A	; 10
 9a2:	26 9f       	mul	r18, r22
 9a4:	11 24       	eor	r1, r1
 9a6:	30 19       	sub	r19, r0
 9a8:	30 5d       	subi	r19, 0xD0	; 208
 9aa:	31 93       	st	Z+, r19
 9ac:	de f6       	brtc	.-74     	; 0x964 <__ultoa_invert+0xe>
 9ae:	cf 01       	movw	r24, r30
 9b0:	08 95       	ret
 9b2:	46 2f       	mov	r20, r22
 9b4:	47 70       	andi	r20, 0x07	; 7
 9b6:	40 5d       	subi	r20, 0xD0	; 208
 9b8:	41 93       	st	Z+, r20
 9ba:	b3 e0       	ldi	r27, 0x03	; 3
 9bc:	0f d0       	rcall	.+30     	; 0x9dc <__ultoa_invert+0x86>
 9be:	c9 f7       	brne	.-14     	; 0x9b2 <__ultoa_invert+0x5c>
 9c0:	f6 cf       	rjmp	.-20     	; 0x9ae <__ultoa_invert+0x58>
 9c2:	46 2f       	mov	r20, r22
 9c4:	4f 70       	andi	r20, 0x0F	; 15
 9c6:	40 5d       	subi	r20, 0xD0	; 208
 9c8:	4a 33       	cpi	r20, 0x3A	; 58
 9ca:	18 f0       	brcs	.+6      	; 0x9d2 <__ultoa_invert+0x7c>
 9cc:	49 5d       	subi	r20, 0xD9	; 217
 9ce:	31 fd       	sbrc	r19, 1
 9d0:	40 52       	subi	r20, 0x20	; 32
 9d2:	41 93       	st	Z+, r20
 9d4:	02 d0       	rcall	.+4      	; 0x9da <__ultoa_invert+0x84>
 9d6:	a9 f7       	brne	.-22     	; 0x9c2 <__ultoa_invert+0x6c>
 9d8:	ea cf       	rjmp	.-44     	; 0x9ae <__ultoa_invert+0x58>
 9da:	b4 e0       	ldi	r27, 0x04	; 4
 9dc:	a6 95       	lsr	r26
 9de:	97 95       	ror	r25
 9e0:	87 95       	ror	r24
 9e2:	77 95       	ror	r23
 9e4:	67 95       	ror	r22
 9e6:	ba 95       	dec	r27
 9e8:	c9 f7       	brne	.-14     	; 0x9dc <__ultoa_invert+0x86>
 9ea:	00 97       	sbiw	r24, 0x00	; 0
 9ec:	61 05       	cpc	r22, r1
 9ee:	71 05       	cpc	r23, r1
 9f0:	08 95       	ret
 9f2:	9b 01       	movw	r18, r22
 9f4:	ac 01       	movw	r20, r24
 9f6:	0a 2e       	mov	r0, r26
 9f8:	06 94       	lsr	r0
 9fa:	57 95       	ror	r21
 9fc:	47 95       	ror	r20
 9fe:	37 95       	ror	r19
 a00:	27 95       	ror	r18
 a02:	ba 95       	dec	r27
 a04:	c9 f7       	brne	.-14     	; 0x9f8 <__ultoa_invert+0xa2>
 a06:	62 0f       	add	r22, r18
 a08:	73 1f       	adc	r23, r19
 a0a:	84 1f       	adc	r24, r20
 a0c:	95 1f       	adc	r25, r21
 a0e:	a0 1d       	adc	r26, r0
 a10:	08 95       	ret

00000a12 <__prologue_saves__>:
 a12:	2f 92       	push	r2
 a14:	3f 92       	push	r3
 a16:	4f 92       	push	r4
 a18:	5f 92       	push	r5
 a1a:	6f 92       	push	r6
 a1c:	7f 92       	push	r7
 a1e:	8f 92       	push	r8
 a20:	9f 92       	push	r9
 a22:	af 92       	push	r10
 a24:	bf 92       	push	r11
 a26:	cf 92       	push	r12
 a28:	df 92       	push	r13
 a2a:	ef 92       	push	r14
 a2c:	ff 92       	push	r15
 a2e:	0f 93       	push	r16
 a30:	1f 93       	push	r17
 a32:	cf 93       	push	r28
 a34:	df 93       	push	r29
 a36:	cd b7       	in	r28, 0x3d	; 61
 a38:	de b7       	in	r29, 0x3e	; 62
 a3a:	ca 1b       	sub	r28, r26
 a3c:	db 0b       	sbc	r29, r27
 a3e:	0f b6       	in	r0, 0x3f	; 63
 a40:	f8 94       	cli
 a42:	de bf       	out	0x3e, r29	; 62
 a44:	0f be       	out	0x3f, r0	; 63
 a46:	cd bf       	out	0x3d, r28	; 61
 a48:	09 94       	ijmp

00000a4a <__epilogue_restores__>:
 a4a:	2a 88       	ldd	r2, Y+18	; 0x12
 a4c:	39 88       	ldd	r3, Y+17	; 0x11
 a4e:	48 88       	ldd	r4, Y+16	; 0x10
 a50:	5f 84       	ldd	r5, Y+15	; 0x0f
 a52:	6e 84       	ldd	r6, Y+14	; 0x0e
 a54:	7d 84       	ldd	r7, Y+13	; 0x0d
 a56:	8c 84       	ldd	r8, Y+12	; 0x0c
 a58:	9b 84       	ldd	r9, Y+11	; 0x0b
 a5a:	aa 84       	ldd	r10, Y+10	; 0x0a
 a5c:	b9 84       	ldd	r11, Y+9	; 0x09
 a5e:	c8 84       	ldd	r12, Y+8	; 0x08
 a60:	df 80       	ldd	r13, Y+7	; 0x07
 a62:	ee 80       	ldd	r14, Y+6	; 0x06
 a64:	fd 80       	ldd	r15, Y+5	; 0x05
 a66:	0c 81       	ldd	r16, Y+4	; 0x04
 a68:	1b 81       	ldd	r17, Y+3	; 0x03
 a6a:	aa 81       	ldd	r26, Y+2	; 0x02
 a6c:	b9 81       	ldd	r27, Y+1	; 0x01
 a6e:	ce 0f       	add	r28, r30
 a70:	d1 1d       	adc	r29, r1
 a72:	0f b6       	in	r0, 0x3f	; 63
 a74:	f8 94       	cli
 a76:	de bf       	out	0x3e, r29	; 62
 a78:	0f be       	out	0x3f, r0	; 63
 a7a:	cd bf       	out	0x3d, r28	; 61
 a7c:	ed 01       	movw	r28, r26
 a7e:	08 95       	ret

00000a80 <_exit>:
 a80:	f8 94       	cli

00000a82 <__stop_program>:
 a82:	ff cf       	rjmp	.-2      	; 0xa82 <__stop_program>
